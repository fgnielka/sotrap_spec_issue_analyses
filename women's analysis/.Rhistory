install.packages("SPSStoR")
library(devtools)
install_github("SPSStoR", "lebebr01")
library(tidyverse)
view(case_when())
view(case_when
)
view(vec_case_when)
load("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation/.RData")
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "igraph")
#load required packages
lapply(packages, require, character.only=T)
(ego_size(network_pm_uw, 2)-1)/(vcount(network_pm_uw)-1)
create_centrality_table <- function(x, username, is_weighted){
username <- vertex_attr(x, username)
if (is_weighted == TRUE){
ct <- tibble("username" = username,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"weighted_in_degree" = strength(x, mode="in", loops = FALSE),
"weighted_out_degree" = strength(x, mode="out", loops = FALSE),
"weighted_eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"weighted_hub_score" = hub_score(x)$vector,
"weighted_authority_score"=authority_score(x)$vector,
"weighted_in_closeness" = closeness(x, mode = "in"),
"weighted_out_closeness" = closeness(x, mode = "out"),
"weighted_betweenness" = betweenness(x),
"weigthed_in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"weighted_out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
else {
ct <- tibble("username" = username,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"hub_score" = hub_score(x)$vector,
"authority_score"=authority_score(x)$vector,
"in_closeness" = closeness(x, mode = "in"),
"out_closeness" = closeness(x, mode = "out"),
"betweenness" = betweenness(x),
"in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
return(ct)
}
create_centrality_table(network_pm_uw, "username", TRUE)
create_centrality_table(network_pm_uw, "username", FALSE)
View(Private_Messages_Networks)
knitr::opts_chunk$set(echo = TRUE)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks[["pm_uw"]],
"username", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks[["pm_w"]],
"username", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks[["replies_uw"]],
"name", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks[["replies_w"]],
"name", TRUE))
Replies_Networks$replies_uw %>% class()
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"username", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"username", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"name", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"name", TRUE))
View(Replies_Networks)
View(Private_Messages_Networks)
Replies_Networks$replies_uw %>% class()
Replies_Networks$"replies_uw" %>% class()
Replies_Networks$"replies_uw" %>% ensure_igraph()
network_replies_uw %>% class()
harmonic_centrality(Replies_Networks$replies_uw, mode= "in")
harmonic_centrality(Replies_Networks$"replies_uw", mode= "in")
create_centrality_table(Replies_Networks$"pm_uw",
"username", FALSE)
View(create_centrality_table)
vertex_attr(Replies_Networks$replies_uw, "username")
vertex_attr(Replies_Networks$replies_uw, "name")
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"name", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"name", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"username", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"username", TRUE))
vertex_attr(Replies_Networks$replies_uw, "name")
create_centrality_table <- function(x, username, is_weighted){
users <- vertex_attr(x, username)
if (is_weighted == TRUE){
ct <- tibble("username" = users,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"weighted_in_degree" = strength(x, mode="in", loops = FALSE),
"weighted_out_degree" = strength(x, mode="out", loops = FALSE),
"weighted_eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"weighted_hub_score" = hub_score(x)$vector,
"weighted_authority_score"=authority_score(x)$vector,
"weighted_in_closeness" = closeness(x, mode = "in"),
"weighted_out_closeness" = closeness(x, mode = "out"),
"weighted_betweenness" = betweenness(x),
"weigthed_in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"weighted_out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
else {
ct <- tibble("username" = users,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"hub_score" = hub_score(x)$vector,
"authority_score"=authority_score(x)$vector,
"in_closeness" = closeness(x, mode = "in"),
"out_closeness" = closeness(x, mode = "out"),
"betweenness" = betweenness(x),
"in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
return(ct)
}
vertex_attr(Replies_Networks$replies_uw, "name")
vertex_attr(Replies_Networks$replies_uw, "name") %>% class()
vertex_attr(Replies_Networks$replies_uw, "name") %>% class() %>% length()
vertex_attr(Replies_Networks$replies_uw, "name") %>% length()
degree(Replies_Networks$replies_uw, mode = "in", loops = FALSE) %>% length()
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"name", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"name", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"username", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"username", TRUE))
create_centrality_table(Replies_Networks$"pm_uw","name", FALSE)
rlang::last_trace()
username <- "username"
vertex_attr(Replies_Networks$replies_uw, username)
vertex_attr(Replies_Networks$replies_uw, "name")
username <- "name"
vertex_attr(Replies_Networks$replies_uw, username)
create_centrality_table(Replies_Networks$replies_uw, username)
create_centrality_table(Replies_Networks$replies_uw, username, FALSE)
create_centrality_table(Replies_Networks$replies_uw, "name")
create_centrality_table(Replies_Networks$replies_uw, c("name"))
create_centrality_table(Replies_Networks$replies_uw, c("name"), FALSE)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
c("username"), TRUE))
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Private_Messages_Networks$"replies_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Private_Messages_Networks$"replies_w",
c("username"), TRUE))
View(Replies_Networks)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"replies_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Private_Messages_Networks$"pm_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Private_Messages_Networks$"pm_w",
c("username"), TRUE))
View(centrality_tables)
saveRDS(centrality_tables, "./out/centrality_tables.RDS")
rm(network_pm_uw, network_pm_w, networks_replies_uw, network_replies_w, received, relations)
rm(sent)
rm(usernames, users)
View(child_replies)
View(centrality_tables)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = username, suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = username, suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% select(username)
centrality_tables$pm_uw %>% select(in_degree)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(username == NA)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(username == Na)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(is.na(username))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(!is.na(username)) %>% pull(username) %>% unique() %>% length()
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(!is.na(username)) %>% pull(username) %>% length()
View(centrality_tables)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% colnames()
centrality_tables <- list("unweighted_network_centralities" =
centrality_tables$pm_uw %>%
full_join(centrality_tables$replies_uw,
by = "username",
suffix=c("_pm", "_replies")) %>%
filter(!is.na(username)),
"weighted_network_centralities" =
centrality_tables$pm_w %>%
full_join(centrality_tables$replies_w,
by = "username",
suffix=c("_pm", "_replies")) %>%
filter(!is.na(username)))
saveRDS(centrality_tables, "./out/centrality_tables.RDS")
View(centrality_tables)
view(centrality_tables$unweighted_network_centralities)
rm(network_pm_uw, network_pm_w, networks_replies_uw, network_replies_w, received, relations)
rm(counted_replies)
rm(child_replies)
rm(banlist)
rm(network_replies_uw)
save.image("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation/.RData")
source("./functions/create_centrality_table.R")
setwd("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation")
request_posts <- read.delim("./data/child_posts.csv", sep="|") %>% as_tibble() %>% filter(fid == 124)
library(tidyverse)
request_posts <- read.delim("./data/child_posts.csv", sep="|") %>% as_tibble() %>% filter(fid == 124)
View(request_posts)
?tolower
?stringr::str_starts()
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request fulfilled"))
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request fulfilled")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_detect(message, "request")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_detect(message, "request")) %>% select(username, message) %>% view()
load("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")
rm(BCH_expanded_dataframe, BCH_results, BCH_results_parameters, class_long, class_longa, class_prob_lca_m, data, data_males, dens_plots, desc_m, f_factor, lca_final_model, lca_final_model_m, lca_fit, lca_models_m, lca_models_m_1, lca_models_m_2, lca_models_m_2.2, log_regs, log_regs_min, logregs_yp, logregs_yp_0.01, LR_lca_m, m_factor, plot_results, plot_results_2, prob_table_LCA_m, results, table_LCA_m, test, test1, test2)
View(Ptable)
rm(Ptable)
View(class_prob_lca_f)
View(BCH_expanded_dataframe_f)
setwd("C:\Users\gniel\OneDrive - MSB Medical School Berlin\Project special issue\LPA_analysis\females' analysis")
setwd("C:\Users\gniel\OneDrive - MSB Medical School Berlin\Project special issue\LPA_analysis\females analysis")
setwd("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")
load("./.RData")
View(lca_fit_f)
lca_fit_f <- table_fit(lca_models_f) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, prob_max, n_min, np_ratio, np_local)
library(tidyverse)
library(tidySEM)
lca_fit_f <- table_fit(lca_models_f) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, prob_max, n_min, np_ratio, np_local)
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")
#Load RData file
load("./.RData")
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
##DATA##
data <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_f, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
#guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd_f %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
#guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
#guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd_all %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#Load RData file
load("./.RData")
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
##DATA##
data <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
#guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd_all %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
guides(fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#create long data frame for plotting, including only the relevant variables
plotd_all <- data %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
# #rename columns
# colnames(quant) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
# #pivot for plotting
# quant <- pivot_longer(quant, cols=lon:socialanx, names_to='var')
# #add CSBD & PPCS_6 manually because they can only be dichotomised
# quant <- rbind(quant, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
# #rename variables
# quant$var[quant$var=="V1"] <- "CSBD"
# quant$var[quant$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_all %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
#geom_errorbar(data=quant_, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
#scale_linetype_manual(values="solid") +
guides(fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd_all %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")

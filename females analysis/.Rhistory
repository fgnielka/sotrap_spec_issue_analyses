ctp<-matrix(nrow=n,ncol=n_class^2)#proportional weights 3*3 class
modal<-matrix(nrow=n, ncol=n_class^2) #modal class assignment 3 dummies for 3 classes
for (j in 1:n_class) # creating dummies for modal posterior class assignment
{
modal[,j]<- ifelse (posteriors$predicted==j, 1, 0)
}
view(modal)
#creating the weights needed for the D matrix calculation
n<-nrow(posteriors) # the length of the data file
n_class <- ncol(posteriors-1) #number of classes in the lca solution
ctm<-matrix(nrow=n,ncol=n_class)#modal weights 3*3 class
ctp<-matrix(nrow=n,ncol=n_class)#proportional weights 3*3 class
modal<-matrix(nrow=n, ncol=n_class) #modal class assignment 3 dummies for 3 classes
for (j in 1:n_class) # creating dummies for modal posterior class assignment
{
modal[,j]<- ifelse (posteriors$predicted==j, 1, 0)
}
view(modal)
n_class
#creating the weights needed for the D matrix calculation
n<-nrow(posteriors) # the length of the data file
n_class <- ncol(posteriors)-1 #number of classes in the lca solution
ctm<-matrix(nrow=n,ncol=n_class)#modal weights 3*3 class
ctp<-matrix(nrow=n,ncol=n_class)#proportional weights 3*3 class
modal<-matrix(nrow=n, ncol=n_class) #modal class assignment 3 dummies for 3 classes
for (j in 1:n_class) # creating dummies for modal posterior class assignment
{
modal[,j]<- ifelse (posteriors$predicted==j, 1, 0)
}
modal
view(ctm)
??elementwise
posteriors %>% select(-1)
posteriors %>% select(-predicted) %>% as_matrix
posteriors %>% select(-predicted) %>% as_matrix()
posteriors %>% select(-predicted) %>% as.matrix()
(posteriors %>% select(-predicted) %>% as.matrix())*modal
modla
modal
?solve()
modal
# obtaining the elements of the D matrix
ctm <- (posteriors %>% select(-predicted) %>% as.matrix())*modal
combined <- c(modal, ctm)
combined
combined <- cbind(modal, ctm)
combined
combined %>% str(+)
combined %>% str()
combined %>% class()
colSums(cobined)
colSums(combined)
class_prob(lca_final_model_m, type="avg.mostlikely")
modal %>% head()
combined %>% head()
apply(combined,2,sum)
apply(combined,2,sum) %>% cbind() %>% class()
apply(combined,2,sum) %>% cbind() %>% str()
apply(combined,2,sum) %>% str()
colSums()
COLSUMS
COLSUMS<- apply(combined,2,sum) %>% cbind() #summing all the weights
COLSUMS
4:12 %>% length()
ctm
apply(posteriors %>% select(-predicted),1,which.max)
posteriors <- class_prob(lca_final_model_m, type="individual")$individual %>% select(-predicted)
modclass <- apply(posteriors,1,which.max)
nclass=3
Ptable <- cbind(posteriors, modclass)
Pmatrix <- matrix(0, nclass, nclass)
Npmatrix <- matrix(0, nclass, nclass)
for (i in 1:nclass){
for (j in 1:nclass){
Pmatrix[i,j]<-sum(subset(Ptable, modclass==i)[,j])
Npmatrix[i,j] <- Pmatrix[i,j]*table(modclass)[i]
}
}
view(Npmatrix)
view(Pmatrix)
table(modclass)
modclass
posteriors <- class_prob(lca_final_model_m, type="individual")$individual %>% select(-predicted)
posteriors <- class_prob(lca_final_model_m, type="individual")$individual %>% select(-predicted)
posteriors <- class_prob(lca_final_model_m, type="individual")$individual %>% as_tibble() %>% select(-predicted)
modclass <- apply(posteriors,1,which.max)
nclass=3
Ptable <- cbind(posteriors, modclass)
Pmatrix <- matrix(0, nclass, nclass)
Npmatrix <- matrix(0, nclass, nclass)
for (i in 1:nclass){
for (j in 1:nclass){
Pmatrix[i,j]<-sum(subset(Ptable, modclass==i)[,j])
Npmatrix[i,j] <- Pmatrix[i,j]*table(modclass)[i]
}
}
view(Npmatrix)
view(Pmatrix)
denom<-colSums(Npmatrix)
Qmatrix<-matrix(0, nclass, nclass)
for (i in 1:nclass){
for (j in 1:nclass){
Qmatrix[j,i]<-Npmatrix[i,j]/denom[j]
}
}
view(Qmatrix)
sum(subset(Ptable,modclass==1)
)
sum(subset(Ptable,modclass==1)[,1])
subset(Ptable,modclass==1)[,1]
subset(Ptable,modclass==1)
table(modclass)[1]
iD <- solve(Qmatrix)
View(iD)
combined
DIM <- solve(Qmatrix)
#final modal bch weights applied to each case i
wm1<- ((combined[,1]*DIM[1,1]) + ( combined[,2]
*DIM[2,1]) + (combined[,3]*DIM[3,1]))
wm2<- ((combined[,1]*DIM[1,2]) + (combined[,2]
*DIM[2,2]) + (combined[,3]*DIM[3,2]))
wm3<- ((combined[,1]*DIM[1,3]) + ( combined[,2]
*DIM[2,3]) + (combined[,3]*DIM[3,3]))
wm1 %>% length()
#create and save long file
class_longa<-data.frame (wmodal1=combined[,1],
wmodal2=combined[,2],
wmodal3=combined[,3],
wbchmodal1=wm1, wbchmodal2=wm2,
bchmodal3=wm3)
install.packages("Hmisc")
library(Hmisc)
View(class_longa)
#create and save long file
class_longa<-data.frame (wmodal1=combined[,1],
wmodal2=combined[,2],
wmodal3=combined[,3],
wbchmodal1=wm1, wbchmodal2=wm2,
wbchmodal3=wm3)
class_long<- reShape(class_longa, base=c("wmodal","wbchmodal"),reps=3)
View(class_long)
View(class_longa)
View(combined)
wm1
wm1[1]
(combined[,1]*DIM[1,1]) + ( combined[,2]
*DIM[2,1]) + (combined[,3]*DIM[3,1])
DIM %>% head()
DIM[1,1]
library(tidyverse)
library(logistf)
install.packages("stepmixr")
test_stepm <- stepmix(n_components = 3,
n_steps=3,
measurement = "multinoulli",
correction = "ML",
verbose=1)
data_males %>% colnames()
library(tidyverse)
data_males %>% select(-CASE) %>% colnameS()
data_males %>% select(-CASE)
Y = haven::read_spss("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/data/data raw/dataE_clear5 2209.sav")
Y = haven::read_spss("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/data/data raw/dataE_clear5 2209.sav") %>%
filter(gender == 2) %>% select(starts_with("Y") & ends_with("_r"))
View(Y)
test_stepm <- stepmix(n_components = 3,
n_steps=3,
measurement = "multinoulli",
correction = "ML",
verbose=1)
library("stepmixr")
test_stepm <- stepmix(n_components = 3,
n_steps=3,
measurement = "multinoulli",
correction = "ML",
verbose=1)
test_stepm.fit <- fit(test_stepm,
X = data_males %>% select(-CASE)
Y = Y)
test_stepm.fit <- fit(test_stepm,
X = data_males %>% select(-CASE),
Y = Y)
Y %>% lapply(as.integer)
data_males %>% select(-CASE) %>% lapply(as.integer)
data_males %>% select(-CASE) %>% lapply(as.integer) %>% as.tibble()
data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble()
data_males
test_stepm.fit <- fit(test_stepm,
X = data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble(),
Y = Y)
bootstrap_stats(test_stepm.fit, n_repetitions = 100)
bootstrap_stats(test_stepm.fit, X = data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble(),
Y = Y n_repetitions = 100)
bootstrap_stats(test_stepm.fit, X = data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble(),
Y = Y, n_repetitions = 100)
test_stepm <- stepmix(n_components = 3,
n_steps=3,
measurement = "multinoulli",
correction = "ML",
structural = "binary",
verbose=1)
test_stepm.fit <- fit(test_stepm,
X = data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble(),
Y = Y)
nrow
view(nrow)
mm_stepm <- lapply(1:7, function(x){
test_stepm <- stepmix(n_components = x,
measurement = "multinoulli",
verbose=1)
test_stepm.fit <- fit(test_stepm,
X = data_males %>% select(-CASE) %>% lapply(as.integer) %>% as_tibble())
return(list(model = test_stepm, fit = test_stepm.fit))
})
mm_stepm
View(mm_stepm)
mm_stepm$1$fit$bic
mm_stepm[[1]]$fit$bic
summary(mm_stepm[[1]]$fit)
summary(mm_stepm[[1]]$fit
mm_stepm[[1]]$fit
bic(mm_stepm[[1]]$fit)
bic(mm_stepm[[3]]$fit)
mm_stepm[[3]]$fit
mm_stepm[[4]]$fit
mm_stepm[[2]]$fit
mm_stepm[[5]]$fit
mm_stepm[[3]]$fit
test_stepm
test_stepm.fit
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/stepmix/.RData")
install.packages("SPSStoR")
library(devtools)
install_github("SPSStoR", "lebebr01")
library(tidyverse)
view(case_when())
view(case_when
)
view(vec_case_when)
load("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation/.RData")
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "igraph")
#load required packages
lapply(packages, require, character.only=T)
(ego_size(network_pm_uw, 2)-1)/(vcount(network_pm_uw)-1)
create_centrality_table <- function(x, username, is_weighted){
username <- vertex_attr(x, username)
if (is_weighted == TRUE){
ct <- tibble("username" = username,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"weighted_in_degree" = strength(x, mode="in", loops = FALSE),
"weighted_out_degree" = strength(x, mode="out", loops = FALSE),
"weighted_eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"weighted_hub_score" = hub_score(x)$vector,
"weighted_authority_score"=authority_score(x)$vector,
"weighted_in_closeness" = closeness(x, mode = "in"),
"weighted_out_closeness" = closeness(x, mode = "out"),
"weighted_betweenness" = betweenness(x),
"weigthed_in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"weighted_out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
else {
ct <- tibble("username" = username,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"hub_score" = hub_score(x)$vector,
"authority_score"=authority_score(x)$vector,
"in_closeness" = closeness(x, mode = "in"),
"out_closeness" = closeness(x, mode = "out"),
"betweenness" = betweenness(x),
"in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
return(ct)
}
create_centrality_table(network_pm_uw, "username", TRUE)
create_centrality_table(network_pm_uw, "username", FALSE)
View(Private_Messages_Networks)
knitr::opts_chunk$set(echo = TRUE)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks[["pm_uw"]],
"username", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks[["pm_w"]],
"username", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks[["replies_uw"]],
"name", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks[["replies_w"]],
"name", TRUE))
Replies_Networks$replies_uw %>% class()
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"username", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"username", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"name", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"name", TRUE))
View(Replies_Networks)
View(Private_Messages_Networks)
Replies_Networks$replies_uw %>% class()
Replies_Networks$"replies_uw" %>% class()
Replies_Networks$"replies_uw" %>% ensure_igraph()
network_replies_uw %>% class()
harmonic_centrality(Replies_Networks$replies_uw, mode= "in")
harmonic_centrality(Replies_Networks$"replies_uw", mode= "in")
create_centrality_table(Replies_Networks$"pm_uw",
"username", FALSE)
View(create_centrality_table)
vertex_attr(Replies_Networks$replies_uw, "username")
vertex_attr(Replies_Networks$replies_uw, "name")
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"name", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"name", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"username", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"username", TRUE))
vertex_attr(Replies_Networks$replies_uw, "name")
create_centrality_table <- function(x, username, is_weighted){
users <- vertex_attr(x, username)
if (is_weighted == TRUE){
ct <- tibble("username" = users,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"weighted_in_degree" = strength(x, mode="in", loops = FALSE),
"weighted_out_degree" = strength(x, mode="out", loops = FALSE),
"weighted_eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"weighted_hub_score" = hub_score(x)$vector,
"weighted_authority_score"=authority_score(x)$vector,
"weighted_in_closeness" = closeness(x, mode = "in"),
"weighted_out_closeness" = closeness(x, mode = "out"),
"weighted_betweenness" = betweenness(x),
"weigthed_in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"weighted_out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
else {
ct <- tibble("username" = users,
"in_degree" = degree(x, mode = "in", loops = FALSE),
"out_degree" = degree(x, mode = "out", loops = FALSE),
"eigenvector_centrality" = eigen_centrality(x, directed = TRUE)$vector,
"hub_score" = hub_score(x)$vector,
"authority_score"=authority_score(x)$vector,
"in_closeness" = closeness(x, mode = "in"),
"out_closeness" = closeness(x, mode = "out"),
"betweenness" = betweenness(x),
"in_harmonic_centrality" = harmonic_centrality(x, mode= "in"),
"out_harmonic_centrality" = harmonic_centrality(x, mode= "out"),
"Reach_2" = (ego_size(x, 2)-1)/(vcount(x)-1)
)
}
return(ct)
}
vertex_attr(Replies_Networks$replies_uw, "name")
vertex_attr(Replies_Networks$replies_uw, "name") %>% class()
vertex_attr(Replies_Networks$replies_uw, "name") %>% class() %>% length()
vertex_attr(Replies_Networks$replies_uw, "name") %>% length()
degree(Replies_Networks$replies_uw, mode = "in", loops = FALSE) %>% length()
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
"name", FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
"name", TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
"username", FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
"username", TRUE))
create_centrality_table(Replies_Networks$"pm_uw","name", FALSE)
rlang::last_trace()
username <- "username"
vertex_attr(Replies_Networks$replies_uw, username)
vertex_attr(Replies_Networks$replies_uw, "name")
username <- "name"
vertex_attr(Replies_Networks$replies_uw, username)
create_centrality_table(Replies_Networks$replies_uw, username)
create_centrality_table(Replies_Networks$replies_uw, username, FALSE)
create_centrality_table(Replies_Networks$replies_uw, "name")
create_centrality_table(Replies_Networks$replies_uw, c("name"))
create_centrality_table(Replies_Networks$replies_uw, c("name"), FALSE)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Replies_Networks$"replies_w",
c("username"), TRUE))
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"pm_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"pm_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Private_Messages_Networks$"replies_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Private_Messages_Networks$"replies_w",
c("username"), TRUE))
View(Replies_Networks)
centrality_tables <- list("pm_uw" =
create_centrality_table(Replies_Networks$"replies_uw",
c("name"), FALSE),
"pm_w" =
create_centrality_table(Replies_Networks$"replies_w",
c("name"), TRUE),
"replies_uw" =
create_centrality_table(Private_Messages_Networks$"pm_uw",
c("username"), FALSE),
"replies_w" =
create_centrality_table(Private_Messages_Networks$"pm_w",
c("username"), TRUE))
View(centrality_tables)
saveRDS(centrality_tables, "./out/centrality_tables.RDS")
rm(network_pm_uw, network_pm_w, networks_replies_uw, network_replies_w, received, relations)
rm(sent)
rm(usernames, users)
View(child_replies)
View(centrality_tables)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = username, suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = username, suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% select(username)
centrality_tables$pm_uw %>% select(in_degree)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("pm_", "replies_"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies"))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(username == NA)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(username == Na)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(is.na(username))
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(!is.na(username)) %>% pull(username) %>% unique() %>% length()
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% filter(!is.na(username)) %>% pull(username) %>% length()
View(centrality_tables)
centrality_tables$pm_uw %>% full_join(centrality_tables$replies_uw, by = "username", suffix=c("_pm", "_replies")) %>% colnames()
centrality_tables <- list("unweighted_network_centralities" =
centrality_tables$pm_uw %>%
full_join(centrality_tables$replies_uw,
by = "username",
suffix=c("_pm", "_replies")) %>%
filter(!is.na(username)),
"weighted_network_centralities" =
centrality_tables$pm_w %>%
full_join(centrality_tables$replies_w,
by = "username",
suffix=c("_pm", "_replies")) %>%
filter(!is.na(username)))
saveRDS(centrality_tables, "./out/centrality_tables.RDS")
View(centrality_tables)
view(centrality_tables$unweighted_network_centralities)
rm(network_pm_uw, network_pm_w, networks_replies_uw, network_replies_w, received, relations)
rm(counted_replies)
rm(child_replies)
rm(banlist)
rm(network_replies_uw)
save.image("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation/.RData")
source("./functions/create_centrality_table.R")
setwd("C:/ARICA/WP 3/Publications/Springer paper/network_data_preparation")
request_posts <- read.delim("./data/child_posts.csv", sep="|") %>% as_tibble() %>% filter(fid == 124)
library(tidyverse)
request_posts <- read.delim("./data/child_posts.csv", sep="|") %>% as_tibble() %>% filter(fid == 124)
View(request_posts)
?tolower
?stringr::str_starts()
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request fulfilled"))
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request fulfilled")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_starts(message, "request")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_detect(message, "request")) %>% select(username, message)
request_posts %>% mutate(message = message %>% str_to_lower()) %>% filter(str_detect(message, "request")) %>% select(username, message) %>% view()
load("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")
rm(BCH_expanded_dataframe, BCH_results, BCH_results_parameters, class_long, class_longa, class_prob_lca_m, data, data_males, dens_plots, desc_m, f_factor, lca_final_model, lca_final_model_m, lca_fit, lca_models_m, lca_models_m_1, lca_models_m_2, lca_models_m_2.2, log_regs, log_regs_min, logregs_yp, logregs_yp_0.01, LR_lca_m, m_factor, plot_results, plot_results_2, prob_table_LCA_m, results, table_LCA_m, test, test1, test2)
View(Ptable)
rm(Ptable)
View(class_prob_lca_f)
View(BCH_expanded_dataframe_f)
setwd("C:\Users\gniel\OneDrive - MSB Medical School Berlin\Project special issue\LPA_analysis\females' analysis")
setwd("C:\Users\gniel\OneDrive - MSB Medical School Berlin\Project special issue\LPA_analysis\females analysis")
setwd("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")
load("./.RData")
View(lca_fit_f)
lca_fit_f <- table_fit(lca_models_f) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, prob_max, n_min, np_ratio, np_local)
library(tidyverse)
library(tidySEM)
lca_fit_f <- table_fit(lca_models_f) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, prob_max, n_min, np_ratio, np_local)
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/females analysis/.RData")

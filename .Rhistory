geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=.2))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=.2))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=.7))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=2))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=20))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=14))
#create long data frame for plotting, including only the relevant variables
plotd_m <- data_males %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable
quant_m <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_males)[, x], 4))))})))))
#rename columns
colnames(quant_m) <- c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx")
#pivot for plotting
quant_m <- pivot_longer(quant_m, cols=CSBD:socialanx, names_to='var')
#call on function in other R script
source("./functions/flat_violin.R")
#plot
g1 <- ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=14))
#plot attraction to children separately
g2 <- ggplot(plotd_m %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="attraction to children", y="count")
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1))
g1 <- ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
g2 <- ggplot(plotd_m %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="attraction to children", y="count")
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1))
#We factorise and bin the variables in the data frame, such that we hopefully get enough cases per bin to estimate parameters in the LCA. Attr is dichotomised, so that we have at least some participants in the cells. However, attr is so severely skewed that we get only around 50 participants who answer non-zero - that will likely produce problems with the LCA.
m_factor <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
m_factor <- lapply(m_factor, ordered) %>% as.tibble()
data_males <- cbind(data_males$CASE, m_factor, data_males$attr) %>% mutate(attr  = case_when(`data_males$attr` == 0 ~ "no attraction", `data_males$attr` > 0 ~ "some attraction"))
data_males <- data_males %>% select(-`data_males$attr`)
data_males <- data_males %>% mutate(attr = attr %>% ordered())
colnames(data_males)[1]<-"CASE"
#Clean up
rm(m_factor)
# #We redo the re-coding for the female data. Be reminded that the cuts for the quantiles are likely different between males and females - keep that in mind while interpreting the LCAs!
# f_factor <- lapply(data_females %>% select(-CASE, -attr, -CSBD, -PPCS_6),cut_number, n=4) %>% as.tibble()
# f_factor <- lapply(f_factor, ordered) %>% as.tibble()
# data_females <- cbind(data_females$CASE, f_factor, data_females$attr) %>% mutate(attr  = case_when(`data_females$attr` == 0 ~ "no attraction", `data_females$attr` > 0 ~ "some attraction"), CSBD = data_females$CSBD, PPCS_6 = data_females$PPCS_6)
# data_females <- data_females %>% select(-`data_females$attr`)
# data_females <- data_females %>% mutate(attr = attr %>% ordered())
# colnames(data_females)[1]<-"CASE"
#
# #Dichotomise CSBD, PPCS_6 because they have not enough cases per bin to cluster it in quantiles. The names of the factor levels show where the cut was set.
# data_females <- data_females %>% mutate(PPCS_6 = cut_number(data_females$PPCS_6, n=2) %>% ordered(), CSBD = cut_number(data_females$CSBD, n=2) %>% ordered())
#Clean up
rm(f_factor)
#Descriptives for males
desc_m <- tidySEM::descriptives(data_males %>% select(-CASE))
desc_m <- desc_m %>% select(name, type, n, missing, unique, mode, mode_value, v)
# #Descriptives for females
# desc_f <- tidySEM::descriptives(data_females %>% select(-CASE))
# desc_f <- desc_f %>% select(name, type, n, missing, unique, mode, mode_value, v)
#We factorise and bin the variables in the data frame, such that we hopefully get enough cases per bin to estimate parameters in the LCA. Attr is dichotomised, so that we have at least some participants in the cells. However, attr is so severely skewed that we get only around 50 participants who answer non-zero - that will likely produce problems with the LCA.
m_factor <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(42)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "rio", "ggpubr", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
#We use gender instead of sex. A 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
#The same for females
data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
#We refrain from renaming the variables to make interpretation across analyses easier.
#create long data frame for plotting, including only the relevant variables
plotd_m <- data_males %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable
quant_m <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_males)[, x], 4))))})))))
#rename columns
colnames(quant_m) <- c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx")
#pivot for plotting
quant_m <- pivot_longer(quant_m, cols=CSBD:socialanx, names_to='var')
#call on function in other R script
source("./functions/flat_violin.R")
#plot
g1 <- ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
g2 <- ggplot(plotd_m %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="attraction to children", y="count")
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1))
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1), heights=c(1, .7))
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1), heights=c(1, .2))
?ggarrange+
?ggarrange
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1), heights=c(1.5, 1))
#arrange plots
ggarrange(g1, g2, ncol=2, nrow=1, widths=c(1.6, 1), heights=c(2, 1))
# #Create vector with rownames
# Variable <- c("Sexual interest in children", "CSBD-7", "LON", "Mating effort", "Low embodied capital", "PPCS-6", "Sex drive", "Social anxiety")
# #Merge male and female descriptives tables
# desc <- merge(desc_m, desc_f, by="name")
# #Bind Variable column to the beginning
# desc <- cbind(Variable, desc)
#Create vector with rownames
Scale <- c("Sexual interest in children", "CSBD-7", "LON", "Mating effort", "Low embodied capital", "PPCS-6", "Sex drive", "Social anxiety")
#Bind Variable column to the beginning
desc_m <- cbind(Scale, desc_m[, -1])
#Pretty output
flextable(desc_m %>% select(-"type", -"missing")) %>%
set_formatter(v=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(n="N", unique="Categories", mode="Mode", mode_value="Modal value", v="v") %>%
theme_booktabs() %>%
autofit()
#Pretty output
flextable(desc_m %>% select(-"type", -"missing")) %>%
set_formatter(v=function(x) format(round(x, 2), nsmall=2),
unique=function(x) x-1) %>%
set_header_labels(n="N", unique="Categories", mode="Mode", mode_value="Modal value", v="v") %>%
theme_booktabs() %>%
autofit()
unique=function(x) format(round(x-1, 0), nsmall=0) %>%
#Pretty output
flextable(desc_m %>% select(-"type", -"missing")) %>%
set_formatter(v=function(x) format(round(x, 2), nsmall=2),
unique=function(x) format(round(x-1, 0), nsmall=0)) %>%
set_header_labels(n="N", unique="Categories", mode="Mode", mode_value="Modal value", v="v") %>%
theme_booktabs() %>%
autofit()
flextable(desc_m %>% select(-"type", -"missing")) %>%
set_formatter(v=function(x) format(round(x, 2), nsmall=2),
unique=function(x) format(round(x-1, 0), nsmall=0)) %>%
set_header_labels(n="N", unique="Categories", mode="Mode", mode_value="Modal value", v="v") %>%
theme_booktabs() %>%
autofit()
plot(lca_fit)
flextable(lca_fit) %>%
set_formatter(Entropy=function(x) format(round(x, 2), nsmall=2),
prob_min=function(x) format(round(x, 2), nsmall=2),
prob_max=function(x) format(round(x, 2), nsmall=2),
n_min=function(x) format(round(x, 2), nsmall=2),
np_ratio=function(x) format(round(x, 2), nsmall=2),
np_local=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Name="Number of classes", LL="LogLikelihood", n="N", prob_min="Min prob", prob_max="Max prob"
#, n_min="", np_ratio="", np_local=""
) %>%
theme_booktabs() %>%
autofit()
class_prob_lca_m
548+361+354
#Make table presentable
prob_table_LCA_m$Variable <- c(rep(c("Sex drive", "CSBD-7", "PPCS-6", "Mating effort", "Social anxiety", "LON", "Low embodied capital", "Sexual interest in children"), each=4))[1:nrow(prob_table_LCA_m)]
#Pretty display
flextable(prob_table_LCA_m) %>%
set_formatter(Probability.class1=function(x) format(round(x, 2), nsmall=2),
Probability.class2=function(x) format(round(x, 2), nsmall=2),
Probability.class3=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Probability.class1="Class 1", Probability.class2="Class 2", Probability.class3="Class 3") %>%
theme_booktabs() %>%
autofit()
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2),
lr_1_0.01 = lapply(BCH_results$models_0.01_weights, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3),
lr_2_0.02 = lapply(BCH_results$models_0.01_weights, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3),
lr_3_0.03 = lapply(BCH_results$models_0.01_weights, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3),
lr_total = lapply(BCH_results$models_0.01_weights, logistftest, weights=BCH_expanded_dataframe$modal_weight_3))
View(BCH_results)
View(BCH_expanded_dataframe)
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2),
lr_1_0.01 = lapply(BCH_results$models_0.01_weights, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3),
lr_2_0.01 = lapply(BCH_results$models_0.01_weights, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3),
lr_3_0.01 = lapply(BCH_results$models_0.01_weights, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3),
lr_total_0.01 = lapply(BCH_results$models_0.01_weights, logistftest, weights=BCH_expanded_dataframe$modal_weight_3))
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
View(BCH_results)
BCH_results <- BCH_results %>% select(-ends_with("_0.01"))
BCH_results <- BCH_results %>% select(-ends_with("_0.02"))
BCH_results <- BCH_results %>% select(-ends_with("_0.03"))
BCH_results %>% rm()
#Combine the results in a dataframe
BCH_results <- BCH_results %>% mutate(models = log_regs)
BCH_results <- BCH_results %>% mutate(models_0.01_weights = log_regs_min)
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
View(BCH_results)
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.2, end=.8, aesthetics = "fill") +
#scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.4, end=.9, aesthetics = "fill") +
#scale_fill_manual(values=c("#444444", "#4d4d4d", "#666666", "#999999", "#b3b3b3", "#bfbfbf", "#cccccc")) +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
plot_prob(lca_final_model_m)
?plot_prob
plot_prob(lca_final_model_m) +
theme_classic
plot_prob(lca_final_model_m) +
theme_classic()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.2, end = 0.8, aesthetics = "fill") +
theme_classic()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
theme_classic()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Sexual interest in children", "CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Sexual interest in children", "CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="")  theme_classic() +
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Sexual interest in children", "CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "rio", "ggpubr", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
View(BCH_expanded_dataframe)
View(BCH_results)
View(BCH_results)
#Set up a dataframe for the the outputs of the regression analysis. Each row corresponds to one item.
BCH_results <- tibble(outcomes = colnames(BCH_expanded_dataframe %>% select(starts_with("Y_"))))
#The Regression estimation appears to be not working with negative weights. I do not understand why this is neccessarily the case. We approach to ad-hoc solutions: 1. Fixing the negative weights to zero, 2. We fix the negative weights to 0.01.
#Fixing negative weights to zero or nigh-zero
BCH_expanded_dataframe <- BCH_expanded_dataframe %>% mutate(modal_weight_2 = case_when(BCH_expanded_dataframe$modal_weight < 0 ~ 0, .default = BCH_expanded_dataframe$modal_weight))
BCH_expanded_dataframe <- BCH_expanded_dataframe %>% mutate(modal_weight_3 = case_when(BCH_expanded_dataframe$modal_weight < 0 ~ 0.01, .default = BCH_expanded_dataframe$modal_weight))
#We prepare the model specifications for the Firth Regression to run.
outcomes <- BCH_expanded_dataframe %>% select(starts_with("Y_")) %>% colnames()
predictors <- BCH_expanded_dataframe %>% select(starts_with("predicted")) %>% select(-predicted_class, -predicted_class_1) %>% colnames() %>% paste(collapse=" + ")
models <- paste(outcomes, "~", predictors, sep=" ")
#Do Flic (Firths regression with intercept correction) for the models in the list with weights fixed to zero.
log_regs <- list()
for (i in 1:17){
log_regs[[i]] <- logistf::logistf(formula=models[i], data = BCH_expanded_dataframe, model=TRUE, weights=BCH_expanded_dataframe$modal_weight_2) %>% flic()
}
##Do Flic for the models in the list with weights fixed to 0.01
log_regs_min <- list()
for (i in 1:17){
log_regs_min[[i]] <- logistf::logistf(formula=models[i], data = BCH_expanded_dataframe,control = logistf.control(fit="IRLS"), model=TRUE, weights=BCH_expanded_dataframe$modal_weight_3) %>% flic()
}
#Combine the results in a dataframe
BCH_results <- BCH_results %>% mutate(models = log_regs)
BCH_results <- BCH_results %>% mutate(models_0.01_weights = log_regs_min)
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
BCH_results <- BCH_results %>% mutate(
lr_1_0.01 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_2_0.01 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_3_0.01 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_total_0.01 = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")))
#Save output to RDS.
BCH_results %>% saveRDS(file="./out/BCH_results.RDS")
View(BCH_results)
BCH_results$lr_total_0.01[[9]]
BCH_results$lr_2_0.01[[9]]
BCH_results$lr_1_0.01[[9]]
BCH_results$lr_3_0.01[[9]]
#Make table presentable
prob_table_LCA_m$Variable <- c(rep(c("Sex drive", "CSBD-7", "PPCS-6", "Mating effort", "Social anxiety", "LON", "Low embodied capital", "Sexual interest in children"), each=4))[1:nrow(prob_table_LCA_m)]
#Pretty display
flextable(prob_table_LCA_m) %>%
set_formatter(Probability.class1=function(x) format(round(x, 2), nsmall=2),
Probability.class2=function(x) format(round(x, 2), nsmall=2),
Probability.class3=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Probability.class1="Class 1", Probability.class2="Class 2", Probability.class3="Class 3") %>%
theme_booktabs() %>%
autofit()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Sexual interest in children", "CSBD"="CSBD-7", "lon"="LON", "meffort"="Mating effort", "mvalue"="Low embodied capital", "PPCS_6"="PPCS-6", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#We prepare the model specifications for the Firth Regression to run.
outcomes <- BCH_expanded_dataframe %>% select(starts_with("Y_")) %>% colnames()
predictors <- BCH_expanded_dataframe %>% select(starts_with("predicted")) %>% select(-predicted_class, -predicted_class_3) %>% colnames() %>% paste(collapse=" + ")
models <- paste(outcomes, "~", predictors, sep=" ")
models
#Do Flic (Firths regression with intercept correction) for the models in the list with weights fixed to zero.
log_regs <- list()
for (i in 1:17){
log_regs[[i]] <- logistf::logistf(formula=models[i], data = BCH_expanded_dataframe, model=TRUE, weights=BCH_expanded_dataframe$modal_weight_2) %>% flic()
}
##Do Flic for the models in the list with weights fixed to 0.01
log_regs_min <- list()
for (i in 1:17){
log_regs_min[[i]] <- logistf::logistf(formula=models[i], data = BCH_expanded_dataframe,control = logistf.control(fit="IRLS"), model=TRUE, weights=BCH_expanded_dataframe$modal_weight_3) %>% flic()
}
#Combine the results in a dataframe
BCH_results <- BCH_results %>% mutate(models = log_regs)
BCH_results <- BCH_results %>% mutate(models_0.01_weights = log_regs_min)
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
BCH_results <- BCH_results %>% mutate(
lr_1_0.01 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_2_0.01 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_3_0.01 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_total_0.01 = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")))
#Save output to RDS.
BCH_results %>% saveRDS(file="./out/BCH_results.RDS")
View(BCH_results)
BCH_results$lr_2_0.01[[6]]
save.image("C:/Users/Rebecca/Documents/GitHub/LPA_analysis/.RData")
citation("logitf")
citation("logistf")
View(BCH_results)
BCH_results$models[[1]]
BCH_results$lr_2_0.01[[1]]
BCH_results$lr_total_0.01[[1]]
BCH_results$models[[1]] %>% summary
citation()
library(rio)
d <- import("C:/Users/Rebecca/Folders/MSB/Projekte/Special issue/data/dataE_1701.sav")
View(d)
View(d[1:10, 200:230])
ggplot(d, aes(x=proclCrimSex)) +
geom_bar()
library(tidyverse)
ggplot(d, aes(x=proclCrimSex)) +
geom_bar()
ggplot(d %>% filter(gender==2), aes(x=proclCrimSex)) +
geom_bar()

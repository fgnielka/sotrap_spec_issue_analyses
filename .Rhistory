c(log_regs,logregs_yp)
BCH_results <- tibble(outcomes = c(colnames(BCH_expanded_dataframe %>% select(starts_with("Y_"))),paste(Yp_variables, "_red", sep="")))
#Combine the results in a dataframe
BCH_results <- BCH_results %>% mutate(models = c(log_regs,logregs_yp))
BCH_results <- BCH_results %>% mutate(models_0.01_weights = c(log_regs_min,logregs_yp_0.01))
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
BCH_results <- BCH_results %>% mutate(
lr_1_0.01 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_2_0.01 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_3_0.01 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_total_0.01 = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")))
BCH_results <- BCH_results %>% mutate(
p_1=lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p2=lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p3=lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_1_0.01=lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_2_0.01=lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_3_0.01=lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
)
#Order BCH_results
BCH_results <- BCH_results[order(BCH_results$outcomes),]
lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist()
View(BCH_results)
BCH_results$outcomes
BCH_results$outcomes %>% sort()
BCH_results$outcomes == BCH_results$outcomes %>% sort()
BCH_results_parameters <-tibble(outcomes = cBCH_results$outcomes,
b_intercept = lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist(),
b_predicted_class_1 = lapply(BCH_results$models, function(x){x$coefficients[2]}) %>% unlist(),
b_predicted_class_2 =lapply(BCH_results$models, function(x){x$coefficients[3]}) %>% unlist(),
b_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[1]}) %>%
unlist(),
b_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[2]}) %>%
unlist(),
b_predicted_class_2_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[3]}) %>%
unlist(),
ci_l_intercept = lapply(BCH_results$models, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1 =lapply(BCH_results$models, function(x){x$ci.lower[2]}) %>% unlist(),
ci_l_predicted_class_2 =lapply(BCH_results$models, function(x){x$ci.lower[3]}) %>% unlist(),
ci_l_intercept_0.01= lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[2]}) %>%
unlist(),
ci_l_predicted_class_2_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[3]}) %>%
unlist(),
ci_r_intercept =lapply(BCH_results$models, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1=lapply(BCH_results$models, function(x){x$ci.upper[2]}) %>% unlist(),
ci_r_predicted_class_2=lapply(BCH_results$models, function(x){x$ci.upper[3]}) %>% unlist(),
ci_r_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[2]}) %>%
unlist(),
ci_r_predicted_class_2_0.01  = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[3]}) %>%
unlist(),
p_lr_intercept = lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1 = lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2 = lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_lr_intercept_0.01 = lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1_0.01 = lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2_0.01 = lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
p_lr_total = lapply(BCH_results$lr_total, function(x){x$prob}) %>% unlist(),
p_lr_total_0.01 = lapply(BCH_results$lr_total_0.01, function(x){x$prob}) %>% unlist())
BCH_results_parameters <-tibble(outcomes = BCH_results$outcomes,
b_intercept = lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist(),
b_predicted_class_1 = lapply(BCH_results$models, function(x){x$coefficients[2]}) %>% unlist(),
b_predicted_class_2 =lapply(BCH_results$models, function(x){x$coefficients[3]}) %>% unlist(),
b_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[1]}) %>%
unlist(),
b_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[2]}) %>%
unlist(),
b_predicted_class_2_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[3]}) %>%
unlist(),
ci_l_intercept = lapply(BCH_results$models, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1 =lapply(BCH_results$models, function(x){x$ci.lower[2]}) %>% unlist(),
ci_l_predicted_class_2 =lapply(BCH_results$models, function(x){x$ci.lower[3]}) %>% unlist(),
ci_l_intercept_0.01= lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[2]}) %>%
unlist(),
ci_l_predicted_class_2_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[3]}) %>%
unlist(),
ci_r_intercept =lapply(BCH_results$models, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1=lapply(BCH_results$models, function(x){x$ci.upper[2]}) %>% unlist(),
ci_r_predicted_class_2=lapply(BCH_results$models, function(x){x$ci.upper[3]}) %>% unlist(),
ci_r_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[2]}) %>%
unlist(),
ci_r_predicted_class_2_0.01  = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[3]}) %>%
unlist(),
p_lr_intercept = lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1 = lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2 = lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_lr_intercept_0.01 = lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1_0.01 = lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2_0.01 = lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
p_lr_total = lapply(BCH_results$lr_total, function(x){x$prob}) %>% unlist(),
p_lr_total_0.01 = lapply(BCH_results$lr_total_0.01, function(x){x$prob}) %>% unlist())
View(BCH_results_parameters)
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red")
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights)
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights) %>% summary()
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights) %>% flatten() %>% summary()
#Save output to RDS.
BCH_results %>% saveRDS(file="./out/BCH_results.RDS")
#Save Parameters Table to RDS
BCH_results_parameters %>% saveRDS(file="./out/BCH_results_parameters.RDS")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "MOTE", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
BCH_results_parameters %>% select(starts_with("b") & ends_with("0.01"))
BCH_results_parameters %>% select(outcomes)
BCH_results_parameters %>% print(n= length(BCH_results_parameters)) %>% select(outcomes)
?print
print(BCH_results_parameters %>% select(outcomes))
print(BCH_results_parameters %>% select(outcomes), n=21)
print(BCH_results_parameters %>% select(outcomes), n=21)
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% select(-ends_with("Yp_r")) %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% filter(-ends_with("Yp_r")) %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% filter(-c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r")) %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
?filter
BCH_results_parameters %>% filter(outcomes != c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r"))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% filter(outcomes != ("Y_proclChatYp_r" | "Y_proclGiftYp_r" | "Y_proclPornYp_r" | "Y_proclSexYp_r")) %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% filter(outcomes != "Y_proclChatYp_r" | outcomes != "Y_proclGiftYp_r" | outcomes != "Y_proclPornYp_r" | outcomes != "Y_proclSexYp_r") %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
BCH_results_parameters %>% filter(outcomes != "Y_proclChatYp_r" | outcomes != "Y_proclGiftYp_r" | outcomes != "Y_proclPornYp_r" | outcomes != "Y_proclSexYp_r")
BCH_results_parameters %>% filter(outcomes != "Y_proclChatYp_r")
BCH_results_parameters %>% filter(outcomes != "Y_proclChatYp_r" | outcomes != "Y_proclGiftYp_r")
BCH_results_parameters %>% filter(outcomes != "Y_proclChatYp_r" | "Y_proclGiftYp_r")
BCH_results_parameters %>% filter(outcomes != ("Y_proclChatYp_r" | "Y_proclGiftYp_r"))
BCH_results_parameters %>% filter(outcomes != c("Y_proclChatYp_r" | "Y_proclGiftYp_r"))
BCH_results_parameters %>% filter(outcomes != c("Y_proclChatYp_r", "Y_proclGiftYp_r"))
BCH_results_parameters %>% filter(!outcomes %in% c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r"))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>% filter(!outcomes %in% c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r")) %>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
results$CI_intercept <- paste0("[", format(round(exp(results$ci_l_intercept_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_intercept_0.01), 2), nsmall=2), "]")
results$CI_class1 <- paste0("[", format(round(exp(results$ci_l_predicted_class_1_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_predicted_class_1_0.01), 2), nsmall=2), "]")
results$CI_class2 <- paste0("[", format(round(exp(results$ci_l_predicted_class_2_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_predicted_class_2_0.01), 2), nsmall=2), "]")
#Add odds for each class
results <- results %>% mutate(odds_predicted_class_1_0.01 = exp(results$b_intercept_0.01)*exp(results$b_predicted_class_1_0.01),
odds_predicted_class_2_0.01 = exp(results$b_intercept_0.01)*exp(results$b_predicted_class_2_0.01),
odds_predicted_class_3_0.01 = exp(results$b_intercept_0.01))
#Pretty output
flextable(results, col_keys=c("Proclivity", "p_lr_total_0.01", "b_intercept_0.01", "CI_intercept", "p_lr_intercept_0.01", "b_predicted_class_1_0.01", "CI_class1", "p_lr_predicted_class_1_0.01", "b_predicted_class_2_0.01", "CI_class2", "p_lr_predicted_class_2_0.01")) %>%
set_formatter(p_lr_total_0.01=function(x) apa(x, decimals=3, leading=F),
b_intercept_0.01=function(x) format(round(exp(x), 2), nsmall=2), #transform into OR with exp()
p_lr_intercept_0.01=function(x) apa(x, decimals=3, leading=F),
b_predicted_class_1_0.01=function(x) format(round(exp(x), 2), nsmall=2),
p_lr_predicted_class_1_0.01=function(x) apa(x, decimals=3, leading=F),
b_predicted_class_2_0.01=function(x) format(round(exp(x), 2), nsmall=2),
p_lr_predicted_class_2_0.01=function(x) apa(x, decimals=3, leading=F)) %>%
set_header_labels(p_lr_total_0.01="p", b_intercept_0.01="Odds", CI_intercept="CI", p_lr_intercept_0.01="p", b_predicted_class_1_0.01="OR", CI_class1="CI", p_lr_predicted_class_1_0.01="p", b_predicted_class_2_0.01="OR", CI_class2="CI", p_lr_predicted_class_2_0.01="p") %>%
add_header_row(values=c("", "Global LRT", "(Intercept)", "Class 1", "Class 2"), colwidths=c(1, 1, 3, 3, 3)) %>%
theme_booktabs() %>%
autofit()
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Chat with a young person [reduced]", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Make a gift to a young person [reduced]", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Watch porn with a young person [reduced]", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Have sex with a young person [reduced]", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>%
# filter(!outcomes %in% c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r"))
%>% select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
#Put relevant results in a table
results <- cbind(Proclivity = c("Chat with a child", "Chat with a young person", "Chat with a young person [reduced]", "Drive under influence", "Make a gift to a child", "Make a gift to a young person", "Make a gift to a young person [reduced]", "Kill someone", "Watch CSEM", "Watch CSEM on the darknet", "Watch porn with a young person", "Watch porn with a young person [reduced]", "Have sex with a prostitute", "Watch porn in public", "Rape someone", "Rob a bank", "Have sex with a child", "Have sex with a young person", "Have sex with a young person [reduced]", "Drive over the speed limit", "Have sex with an animal"), BCH_results_parameters %>%
# filter(!outcomes %in% c("Y_proclChatYp_r", "Y_proclGiftYp_r", "Y_proclPornYp_r", "Y_proclSexYp_r")) %>%
select(ends_with("total_0.01"), starts_with("b") & ends_with("0.01"), starts_with("p") & ends_with("0.01"), starts_with("ci") & ends_with("0.01")))
#Create extra columns with CIs
results$CI_intercept <- paste0("[", format(round(exp(results$ci_l_intercept_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_intercept_0.01), 2), nsmall=2), "]")
results$CI_class1 <- paste0("[", format(round(exp(results$ci_l_predicted_class_1_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_predicted_class_1_0.01), 2), nsmall=2), "]")
results$CI_class2 <- paste0("[", format(round(exp(results$ci_l_predicted_class_2_0.01), 2), nsmall=2), ", ", format(round(exp(results$ci_r_predicted_class_2_0.01), 2), nsmall=2), "]")
#Add odds for each class
results <- results %>% mutate(odds_predicted_class_1_0.01 = exp(results$b_intercept_0.01)*exp(results$b_predicted_class_1_0.01),
odds_predicted_class_2_0.01 = exp(results$b_intercept_0.01)*exp(results$b_predicted_class_2_0.01),
odds_predicted_class_3_0.01 = exp(results$b_intercept_0.01))
#Pretty output
flextable(results, col_keys=c("Proclivity", "p_lr_total_0.01", "b_intercept_0.01", "CI_intercept", "p_lr_intercept_0.01", "b_predicted_class_1_0.01", "CI_class1", "p_lr_predicted_class_1_0.01", "b_predicted_class_2_0.01", "CI_class2", "p_lr_predicted_class_2_0.01")) %>%
set_formatter(p_lr_total_0.01=function(x) apa(x, decimals=3, leading=F),
b_intercept_0.01=function(x) format(round(exp(x), 2), nsmall=2), #transform into OR with exp()
p_lr_intercept_0.01=function(x) apa(x, decimals=3, leading=F),
b_predicted_class_1_0.01=function(x) format(round(exp(x), 2), nsmall=2),
p_lr_predicted_class_1_0.01=function(x) apa(x, decimals=3, leading=F),
b_predicted_class_2_0.01=function(x) format(round(exp(x), 2), nsmall=2),
p_lr_predicted_class_2_0.01=function(x) apa(x, decimals=3, leading=F)) %>%
set_header_labels(p_lr_total_0.01="p", b_intercept_0.01="Odds", CI_intercept="CI", p_lr_intercept_0.01="p", b_predicted_class_1_0.01="OR", CI_class1="CI", p_lr_predicted_class_1_0.01="p", b_predicted_class_2_0.01="OR", CI_class2="CI", p_lr_predicted_class_2_0.01="p") %>%
add_header_row(values=c("", "Global LRT", "(Intercept)", "Class 1", "Class 2"), colwidths=c(1, 1, 3, 3, 3)) %>%
theme_booktabs() %>%
autofit()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS-6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=70, hjust=1, size=10))
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "MOTE", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS-6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=70, hjust=1, size=10))
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS-6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=60, hjust=1, size=10))
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS-6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=65, hjust=1, size=10))
#Make table presentable
prob_table_LCA_m$Variable <- c(rep(c("Sex drive", "Compulsive sex.", "Probl. porn use", "Mating effort", "Social anxiety", "Loneliness", "Mating value", "Attraction to children"), each=4))[1:nrow(prob_table_LCA_m)]
#Pretty display
flextable(prob_table_LCA_m) %>%
set_formatter(Probability.class1=function(x) format(round(x, 2), nsmall=2),
Probability.class2=function(x) format(round(x, 2), nsmall=2),
Probability.class3=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Probability.class1="Class 1", Probability.class2="Class 2", Probability.class3="Class 3") %>%
theme_booktabs() %>%
autofit()
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=65, hjust=1, size=10))
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
##DATA##
#We use gender instead of sex. A 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
# #The same for females
# data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
#create long data frame for plotting, including only the relevant variables
plotd_m <- data_males %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable
quant_m <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_males)[, x], 4))))})))))
#rename columns
colnames(quant_m) <- c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx")
#pivot for plotting
quant_m <- pivot_longer(quant_m, cols=CSBD:socialanx, names_to='var')
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mating value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#plot attraction to children separately
ggplot(plotd_m %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Sexual interest in children", y="Count")
#plot attraction to children separately
ggplot(plotd_m %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
##DATA##
#We use gender instead of sex. A 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
# #The same for females
# data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
plotd_m <- data_males %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable
quant_m <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_males)[, x], 4))))})))))
#rename columns
colnames(quant_m) <- c("CSBD", "lon", "meffort", "mvalue", "PPCS_6", "sexdrive2", "socialanx")
#pivot for plotting
quant_m <- pivot_longer(quant_m, cols=CSBD:socialanx, names_to='var')
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_m %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_m, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="Value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=65, hjust=1, size=10))
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "MOTE", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
plot_prob(lca_final_model_m) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=65, hjust=1, size=10))
#create long data frame for plotting, including only the relevant variables
plotd_f <- data_females %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "MOTE", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
##DATA##
#We use gender instead of sex. A 1 represents a female. We want to only grab females.
data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
#create long data frame for plotting, including only the relevant variables
plotd_f <- data_females %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% pivot_longer(cols=sexdrive2:attr, names_to="var", values_to="score")
#create a table with the quantiles for each variable (except CSBD & PPCS_6)
quant_f <- as.data.frame(t(do.call(rbind.data.frame, (lapply(c("lon", "meffort", "mvalue", "sexdrive2", "socialanx"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 4))))})))))
#rename columns
colnames(quant_f) <- c("lon", "meffort", "mvalue", "sexdrive2", "socialanx")
#pivot for plotting
quant_f <- pivot_longer(quant_f, cols=lon:socialanx, names_to='var')
#add CSBD & PPCS_6 manually because they can only be dichotomised
quant_f <- rbind(quant_f, pivot_longer(as.data.frame(t(do.call(rbind.data.frame, (lapply(c("CSBD", "PPCS_6"), function(x){parse_number(gsub(",.*$", "", levels(cut_number(as.data.frame(data_females)[, x], 2))))}))))), cols=V1:V2, names_to='var'))
#rename variables
quant_f$var[quant_f$var=="V1"] <- "CSBD"
quant_f$var[quant_f$var=="V2"] <- "PPCS_6"
#call on function in other R script
source("./functions/flat_violin.R")
#plot
ggplot(plotd_f %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_f, aes(x=as.factor(var), ymin=value, ymax=value, linetype="quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
labs(x="", y="value") +
theme_classic()
#plot attraction to children separately
ggplot(plotd_f %>% filter(var=="attr"), aes(x=score)) +
geom_bar() +
theme_classic() +
labs(x="Attraction to children", y="Count")
#plot
ggplot(plotd_f %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_f, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic()
#plot
ggplot(plotd_f %>% filter(var!="attr"), aes(x=as.factor(var), y=score, fill=var)) +
geom_flat_violin(scale="width") +
scale_fill_grey(start=.5, end=.9, aesthetics = "fill") +
geom_dotplot(binaxis="y", dotsize=.04, stackdir="down", binwidth=.3, position=position_nudge(-.025)) +
geom_errorbar(data=quant_f, aes(x=as.factor(var), ymin=value, ymax=value, linetype="Quantiles"), inherit.aes=F, linewidth=.5, width=.3, position=position_nudge(x=.15)) +
scale_linetype_manual(values="solid") +
guides(linetype=guide_legend(""), fill="none") +
scale_x_discrete(labels=c("CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="", y="value") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
#Create vector with rownames
Scale <- c("Attraction to children", "Compulsive sex.", "Loneliness", "Mating effort", "Mate value", "Probl. porn use", "Sex drive", "Social anxiety")
#Bind Variable column to the beginning
desc_f <- cbind(Scale, desc_f[, -1])
#Pretty output
flextable(desc_f %>% select(-"type", -"missing")) %>%
set_formatter(v=function(x) format(round(x, 2), nsmall=2),
unique=function(x) format(round(x-1, 0), nsmall=0)) %>%
set_header_labels(n="N", unique="Categories", mode="Mode", mode_value="Modal value", v="v") %>%
theme_booktabs() %>%
autofit()
plot(lca_fit_f)
flextable(lca_fit_f) %>%
set_formatter(Entropy=function(x) format(round(x, 2), nsmall=2),
prob_min=function(x) format(round(x, 2), nsmall=2),
prob_max=function(x) format(round(x, 2), nsmall=2),
n_min=function(x) format(round(x, 2), nsmall=2),
np_ratio=function(x) format(round(x, 2), nsmall=2),
np_local=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Name="Number of classes", LL="LogLikelihood", n="N", prob_min="Min prob", prob_max="Max prob", n_min="Min n", np_ratio="NP ratio", np_local="Local NP"
) %>%
theme_booktabs() %>%
autofit()
class_prob_lca_f
prob_table_LCA_f
#Make table presentable
prob_table_LCA_f$Variable <- c(rep(c("Sex drive", "Mating effort", "Social anxiety", "Loneliness", "Mate value"), each=4), "Attraction to children", "Attraction to children", "Compulsive sex.", "Compulsive sex.", "Probl. porn use", "Probl. porn use")[1:nrow(prob_table_LCA_m)]
#Make table presentable
prob_table_LCA_f$Variable <- c(rep(c("Sex drive", "Mating effort", "Social anxiety", "Loneliness", "Mate value"), each=4), "Attraction to children", "Attraction to children", "Compulsive sex.", "Compulsive sex.", "Probl. porn use", "Probl. porn use")
#Pretty display
flextable(prob_table_LCA_f) %>%
set_formatter(Probability.class1=function(x) format(round(x, 2), nsmall=2),
Probability.class2=function(x) format(round(x, 2), nsmall=2),
Probability.class3=function(x) format(round(x, 2), nsmall=2)) %>%
set_header_labels(Probability.class1="Class 1", Probability.class2="Class 2", Probability.class3="Class 3") %>%
theme_booktabs() %>%
autofit()
plot_prob(lca_final_model_f) +
scale_fill_grey(start = 0.9, end = 0.5, aesthetics = "fill") +
scale_x_discrete(labels=c("attr"="Attraction to children", "CSBD"="Compulsive sex.", "lon"="Loneliness", "meffort"="Mating effort", "mvalue"="Mate value", "PPCS_6"="Probl. porn use", "sexdrive2"="Sex drive", "socialanx"="Social anxiety")) +
labs(x="") +
theme_classic() +
theme(axis.text.x=element_text(angle=65, hjust=1, size=10))

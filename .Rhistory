name <- paste("./data/data_prepared/",results[i,c("dat_name")],".csv", sep="")
readr::write_csv(x=t, file=name)
}
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")
View(lpa_models)
knitr::opts_chunk$set(echo = TRUE)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "dbscan")
set.seed(42)
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
View(data)
dbscan::optics(x=data %>% select(-uid), minPts = 16)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% plot()
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.5)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.1)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.2)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.3)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.09)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.1)
dbscan::optics(x=data %>% select(-uid), minPts = 16) %>% extractXi(xi=0.05)
xi <- c(0.05, 0.04, 0.03, 0.02, 0.01,0.001)
View(lpa_models)
folds <- lpa_models %>% select(nclust, fold, rep, folds,test_fold_uids)
View(folds)
min_Pts = 5:20
?seq()
min_Pts = seq(5,20,by=5)
min_Pts
View(folds)
fodls %>% pull(fodls)
fodls %>% pull(folds)
folds %>% pull(folds)
folds %>% pull(folds) %>% class()
?optics
min_Pts = seq(5,20,by=5)
optics_models <- list()
folds <- lpa_models %>% select(nclust, fold, rep, folds,test_fold_uids)
for (p in min_Pts){
optics_models[[as.character(p)]] <- lapply(folds %>% pull(folds), function(x) {dbscan::optics(x = data[x,] %>% select(-uid), eps=NULL,minPts = p)})
}
View(optics_models)
optics_models <- tibble(names = optics_models_models %>% list_flatten() %>% names(), models = optics_models %>% list_flatten())
optics_models <- tibble(names = optics_models %>% list_flatten() %>% names(), models = optics_models %>% list_flatten())
optics_models[1,2]
optics_models$models[1]
names <- optics_models %>% pull(names) %>% str_split_fixed("_", 2) %>% as_tibble() %>% rename(minPts=V1, fold=V2)
names <- names %>% select(-fold) %>% cbind( names %>% pull(fold) %>% str_split_fixed("\\.", 2) %>% as_tibble() %>% rename(fold = V1, rep = V2))
View(names)
optics_models <- cbind(names, optics_models)
optics_models <- optics_models %>% select(-names)
View(optics_models)
View(optics_models)
optics_models[1,] %>% pull(models) %>% extractDBSCAN(, Inf)
optics_models[1,] %>% pull(models) %>% extractDBSCAN(, eps_cl = Inf)
optics_models[1,] %>% pull(models) %>% extractDBSCAN()
optics_models[1,] %>% pull(models) %>% unlist() %>% extractDBSCAN()
optics_models[1,] %>% pull(models) %>% class()
optics_models[1,] %>% pull(models) %>% class() %>% ulist()
optics_models[1,] %>% pull(models) %>% class() %>% unlist()
optics_models$models[1]
optics_models$models[1] %>% extractDBSCAN()
optics_models$models[1][] %>% extractDBSCAN()
optics_models$models[1][1]
optics_models$models[1][1] %>% class()
optics_models$models[1][1] %>% str()
optics_models$models[1] %>% unlist()
View(optics_models)
optics_models %>% pull(models)[1]
optics_models %>% pull(models)
optics_models$models$5_Fold1.Rep01 %>% class()
optics_models$models$5_Fold1.Rep01
optics_models$models$"5_Fold1.Rep01"
optics_models$models$"5_Fold1.Rep01" %>% class8
optics_models$models$"5_Fold1.Rep01" %>% class()
optics_models$models$"5_Fold1.Rep01" %>% extractDBSCAN()
optics_models$models$"5_Fold1.Rep01" %>% extractDBSCAN(eps_cl= 27)
optics_models$models$"5_Fold1.Rep01" %>% extractDBSCAN(eps_cl= 5)
optics_models$models$"5_Fold1.Rep01" %>% extractDBSCAN(eps_cl = 27)
optics_models$models$"5_Fold1.Rep01" %>% extractXi(xi = 0.05)
optics_models$models$"5_Fold1.Rep01" %>% extractXi(xi = 0.005)
optics_models$models$"5_Fold1.Rep01" %>% extractXi(xi = 0.03)
optics(data %>% select(-uid), minPts = 5)
optics(data %>% select(-uid), minPts = 5) %>% extractXi(Xi=0.05)
optics(data %>% select(-uid), minPts = 5) %>% extractXi(0.05)
optics(data %>% select(-uid), minPts = 5) %>% extractXi(0.03)
optics(data %>% select(-uid), minPts = 5) %>% extractXi(0.01)
optics(data %>% select(-uid), minPts = 10) %>% extractXi(0.05)
optics(data %>% select(-uid), minPts = 15) %>% extractXi(0.05)
optics(data %>% select(-uid), minPts = 20) %>% extractXi(0.05)
optics(data %>% select(-uid), minPts = 20) %>% extractXi(0.05)$cluster
optics(data %>% select(-uid), minPts = 20) %>% extractXi(0.05)
#It#s very hard to find any recommendations on the value of xi. It tells the clustering algorithm what change in density a beginning and the end of a cluster marks. Therefore we refer to the values that are referenced in the
xi <- c(0.001, 0.005, 0.01, 0.05, 0.1)
predict.dbscan
?list()
View(folds)
View(folds)
folds <- lpa_models %>% select(nclust, fold, rep, folds,test_fold_uids) %>% filter(nclust=3)
folds <- lpa_models %>% select(nclust, fold, rep, folds,test_fold_uids) %>% filter(nclust==3)
View(folds)
for (p in min_Pts){
optics_models[[as.character(p)]] <- lapply(folds %>% pull(folds), function(x) {dbscan::optics(x = data[x,] %>% select(-uid), eps=NULL,minPts = p)})
}
optics_models <- tibble(names = optics_models %>% list_flatten() %>% names(), models = optics_models %>% list_flatten())
View(optics_models)
rm(optics_models)
optics_models <- list()
min_Pts
View(folds)
View(folds)
folds$folds[1]
folds$folds[1] %>% class()
folds$folds[1] %>% as.vector()
folds$folds[1] %>% as.vector() %>% class()
folds$folds[1] %>% as.numeric()
folds$folds[1] %>% unlist()
folds$folds[1] %>% unlist() %>% class()
min_Pts = seq(5,20,by=5)
optics_models <- list()
folds <- lpa_models %>% select(nclust, fold, rep, folds,test_fold_uids) %>% filter(nclust==3)
for (p in min_Pts){
optics_models[[as.character(p)]] <- lapply(folds %>% pull(folds), function(x) {dbscan::optics(x = data[x %>% unlist(),] %>% select(-uid), eps=NULL,minPts = p)})
}
View(optics_models)
optics_models <- tibble(names = optics_models %>% list_flatten() %>% names(), models = optics_models %>% list_flatten())
View(optics_models)
names <- optics_models %>% pull(names) %>% str_split_fixed("_", 2) %>% as_tibble() %>% rename(minPts=V1, fold=V2)
names <- names %>% select(-fold) %>% cbind( names %>% pull(fold) %>% str_split_fixed("\\.", 2) %>% as_tibble() %>% rename(fold = V1, rep = V2))
optics_models <- cbind(names, optics_models)
optics_models <- optics_models %>% select(-names)
View(folds)
optics_models %>% mutate(folds=replicate(5, folds %>% pull(folds), simplify = FALSE) %>% list_flatten())
optics_models %>% mutate(folds=replicate(5, folds %>% pull(folds), simplify = FALSE))
optics_models %>% mutate(folds=replicate(4, folds %>% pull(folds), simplify = FALSE))
replicate(4, folds %>% pull(folds), simplify = FALSE)
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% str()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% length()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten() %>% length()
optics_models %>% mutate(folds=replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten())
optics_models %>% mutate(folds=replicate(4, folds %>% pull(folds), simplify = FALSE)) %>% length()
optics_models %>% mutate(folds=replicate(4, folds %>% pull(folds), simplify = FALSE) %>% unlist()) %>% length()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% unlist())
View(folds)
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% unlist() %>% length()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% length()
replicate(4, folds %>% select(folds), simplify = FALSE) %>% length()
replicate(4, folds %>% select(folds), simplify = FALSE) %>% unlist() %>% length()
replicate(4, folds %>% select(folds), simplify = FALSE) %>% list_flatten() %>% length()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten() %>% length()
View(optics_models)
optics_models <-  optics_models %>%  mutate(folds = replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten())
optics
?optics
optics_models$models[1] %>% class()
optics_models$models[1] %>% unlist() %>% class()
optics_models$models[1] %>% list_flatten() %>% class()
optics_models$models[1] %>% list_flatten()
optics_models$models[1] %>% list_flatten() %>% list_flatten() %>% class()
optics_models$models[1] %>% list_flatten() %>% list_flatten()
optics_models[1,] %>% pull(models)
optics_models[1,] %>% pull(models) %>% flatten_list()
optics_models[1,] %>% pull(models) %>% l_flattenist()
optics_models[1,] %>% pull(models) %>% list_flatten()
optics_models$models[[1]]
test <- lapply(1:200, function(x){extractXi(optics_models$models[[x]], 0.001)})
View(test)
test[[1]]$cluster
test[[1]]$cluster %>% view()
test[[1]]$clusters_xi
test[[1]]$clusters_xi %>% view()
test[[1]]$clusters_xi
test[[1]]
test[[1]]$order
test[[1]]$cluster %>% view()
test[[1]]$cluster %>% table()
View(test)
paste("0.004", "Xi", sep="_")
for (x in xi){
optics_models[paste(x, "Xi", sep="_")] <- lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], 0.001)$cluster})
}
View(optics_models)
optics_models<- optics_models[,-6:10]
optics_models<- optics_models[,-c(6:10)]
test <- lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], 0.001)$cluster})
View(t)
View(test)
optics_models %>% class()
for (x in xi){
optics_models[paste(x, "Xi", sep="_")] <- lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], x)$cluster})
}
optics_modela <- optics_models %>% as_tibble()
optics_models <- optics_models %>% as_tibble()
rm(optics_modela)
optics_models %>% class()
for (p in xi){
optics_models[paste(p, "Xi", sep="_")] <- lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], p)$cluster})
}
View(optics_models)
lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], 0.05)$cluster}) %>% length()
lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], 0.05)$cluster}) %>% class()
for (p in xi){
optics_models<- add_column(paste(p, "Xi", sep="_") = lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], p)$cluster}))
ncol(optics_models)
colnames(optics_models)
colnames(optics_models)[5]
optics_models_safe <- optics_models
for (p in xi){
optics_models <- cbind(optics_models, lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], p)$cluster}))
colnames(optics_models)[ncol(optics_mmodels)] <- paste(p, "Xi", sep="_")
}
for (p in xi){
optics_models <- cbind(optics_models, lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], p)$cluster}) %>% as_tibble_col())
colnames(optics_models)[ncol(optics_mmodels)] <- paste(p, "Xi", sep="_")
}
for (p in xi){
optics_models <- cbind(optics_models, lapply(1:nrow(optics_models), function(x){extractXi(optics_models$models[[x]], p)$cluster}) %>% as_tibble_col())
colnames(optics_models)[ncol(optics_models)] <- paste(p, "Xi", sep="_")
}
View(optics_models)
optics_models$models[[1]]$eps
View(folds)
optics_models <-  optics_models %>%  mutate(folds = replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten(), test_fold_uids = replicate(4, folds %>% pull(test_fold_uids), simplify = FALSE) %>% list_flatten())
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten()
replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten() %>% length()
replicate(4, folds %>% pull(test_fold_uids), simplify = FALSE) %>% list_flatten() %>% length()
optics_models <-  optics_models %>%  mutate(folds = replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten(), test_fold_uids = replicate(4, folds %>% pull(test_fold_uids), simplify = FALSE) %>% list_flatten())
#We add the folds to the tibble so we have everything nice and tidy and in one place.
train_folds <- replicate(4, folds %>% pull(folds), simplify = FALSE) %>% list_flatten()
test_folds <- replicate(4, folds %>% pull(test_fold_uids), simplify = FALSE) %>% list_flatten()
View(test_folds)
optics_models <-  optics_models %>%  mutate(folds = train_folds, test_fold_uids = test_folds)
View(optics_models)
data$uid %in% (optics_models[1,] %>% pull(test_fold_uids))
data$uid %in% (optics_models[1,] %>% pull(test_fold_uids)) %>% table()
View(optics_models)
optics_models[1,] %>% pull(test_fold_uids) %>% class()
optics_models[1,] %>% pull(test_fold_uids) %>% unlist() %>% class()
optics_models[1,] %>% pull(test_fold_uids) %>% unlist() %>% head()
data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>% unlist()) %>% table()
data[data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>% unlist())]
data[data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>% unlist()),]
data[data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>% unlist()),] %>% select(-uid)
extractDBSCAN(x=data[data$uid %in% (optics_models[1,] %>%
pull(test_fold_uids) %>%
unlist()),] %>% select(-uid),
eps = optics_models$models[[1]]$eps)}
extractDBSCAN(x=data[data$uid %in% (optics_models[1,] %>%
pull(test_fold_uids) %>%
unlist()),] %>% select(-uid),
eps = optics_models$models[[1]]$eps)
predict(newdata=data[data$uid %in% (optics_models[1,] %>%
pull(test_fold_uids) %>%
unlist()),] %>% select(-uid),
object =  = optics_models$models[[1]]$eps)
predict(newdata=data[data$uid %in% (optics_models[1,] %>%
pull(test_fold_uids) %>%
unlist()),] %>% select(-uid),
object =optics_models$models[[1]])
predict(newdata=data[data$uid %in% (optics_models[1,] %>%
pull(test_fold_uids) %>%
unlist()),] %>% select(-uid),
object =optics_models$models[[1]] %>% extractDBSCAN(eps_cl = optics_models$models[[1]]$eps))
View(lpa_models)
lpa_models$folds[[1]]
lpa_models$folds[[1]] %>% length()
data[optics_models$folds[[1]],] %>% select(-uid)Mhead()
data[optics_models$folds[[1]],] %>% select(-uid) %>% head()
predict(newdata=data[data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$models[[1]] %>% extractDBSCAN(eps_cl = optics_models$models[[1]]$eps),
data = data[optics_models$folds[[1]],] %>% select(-uid)
)
View(lpa_models)
optics_models <- optics_models %>% mutate(cv_predicted_clusters = lapply(1:nrow(optics_models), function(i){predict(newdata=data[data$uid %in% (optics_models[i,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$models[[i]] %>% extractDBSCAN(eps_cl = optics_models$models[[i]]$eps),
data = data[optics_models$folds[[i]],] %>% select(-uid))}))
optics_models$models[[1]]$minPts
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "dbscan")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts)
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
test_plot <- kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
test_plot %>% str()
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
devtools::install_github("etam4260/kneedle")
install.packages("devtools")
devtools::install_github("etam4260/kneedle")
dist <- kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
dist
1:length(dist)
kneedle::kneedle(x=1:length(dist), y=dist)
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
kneedle::kneedle(x=1:length(dist), y=dist, concave=FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=FALSE, decreasing = FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 2)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 3)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 4)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 10)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 12)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)
dist <- kNNdist(x=data[optics_models$folds[[2]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[2]]$minPts-1) %>% sort()
kNNdistplot(x=data[optics_models$folds[[2]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[2]]$minPts-1) %>% sort()
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15) %>% class()
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2]
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% class()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% list_flatten() %>% class()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% unlist()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2])
}) %>% unlist()
optics_models <- optics_models %>% mutate(epsilon_clust = lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2])
}) %>% unlist())
optics_models$epsilon_clust[1]
optics_models <- optics_models %>% mutate(DBSCAN_clustering = lapply(1:nrow(optics_models), function(i){
optics_models$models[[i]] %>% extractDBSCAN(eps_cl = optics_models$epsilon_clust[i])
}))
optics_models <- optics_models %>% mutate(cv_predicted_clusters = lapply(1:nrow(optics_models), function(i){
predict(newdata=data[data$uid %in% (optics_models[i,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$DBSCAN_clustering[[i]],
data = data[optics_models$folds[[i]],] %>% select(-uid))}))
optics_models$cv_predicted_clusters[[1]] %>% table()
optics_models$cv_predicted_clusters[[2]] %>% table()
optics_models$cv_predicted_clusters[[3]] %>% table()
optics_models$cv_predicted_clusters[[4]] %>% table()
optics_models$DBSCAN_clustering[[4]]
lapply(optics_models$cv_predicted_clusters, table) %>% list_flatten()
rm(test_folds, train_folds, t, test, optics_models_safe)
View(results)
rm(results)
View(optics_models)
optics_models <- optics_models %>% select(-"0.001_Xi", -"0.005_Xi", -"0.01_Xi", -"0.05_Xi", -0.1_Xi)
optics_models <- optics_models %>% select(-"0.001_Xi", -"0.005_Xi", -"0.01_Xi", -"0.05_Xi", -"0.1_Xi")
optics_models <- optics_models %>% select(-value)
?Mclust::Mclust()
?Mclust::Mclust
View(data)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
View(lpa_models)
View(lpa_model_eval)
View(lpa_model_eval)
View(optics_models)
full <- data %>% select(-uid) %>% Mclust(, prior = priorControl(), modelNames=c("VVV"))
full
summary(full)
plot(full, what="classification")
###Distribution plots####
dens_plots <- list()
##sex drive
dens_plots[["sex_drive"]]<-ggplot(data, aes(x=sex_drive)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##csbd
dens_plots[["csbd"]]<-ggplot(data, aes(x=csbd)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##ppcs
dens_plots[["ppcs"]]<-ggplot(data, aes(x=ppcs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##soi-r_me
dens_plots[["soi_r_me"]]<-ggplot(data, aes(x=soi_r_me)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##social anxiety
dens_plots[["social_anxiety"]]<-ggplot(data, aes(x=social_anxiety)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##lon
dens_plots[["lon"]]<-ggplot(data, aes(x=lon)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##mvs
dens_plots[["mvs"]]<-ggplot(data, aes(x=mvs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##attraction to children
dens_plots[["attraction_to_children"]]<-ggplot(data, aes(x=attraction_to_children)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
dens_plots[["dens_grid"]]<-ggpubr::ggarrange(
dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=5,
nrow=2
)
```{r outlier_detection}
install.packages("polLCA")
plot(full, what="classification")
View(dens_plots)
dens_plots[["dens_grid"]]
install.packages("polLCA")
library(polLCA)
install.packages("poLCA")
dbcv <- readr::read_csv(".\data\data_prepared\LPA_cv_predicted_clusters\dbcv_dat.csv") %>% as.tibble()
dbcv <- readr::read_csv("./data/data_prepared/LPA_cv_predicted_clusters/dbcv_dat.csv") %>% as.tibble()
View(dbcv)
View(dbcv)
dbcv <- readr::read_csv("./data/data_prepared/LPA_cv_predicted_clusters/dbcv_dat.csv") %>% as.tibble() %>% select(dbcv)
View(lpa_models)
lpa_models <- lpa_models %>% mutate(dbcv = dbcv)
lpa_models %>% colnames()
rm(dbcv)
View(names)
View(lpa)
rm(dbcv, lpa)
rm(dbcv, lpa, names)
View(folds)
View(lpa_models)
View(folds)
rm(folds)
View(lpa_models)
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T))
lpa_models <- lpa_models %>% mutate("dbcv" = dbcv)
colnames(lpa_models)
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean("dbcv", na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T))
lpa_model_eval <- lpa_model_eval %>% mutate(dbcv = lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T)) %>% select(dbcv))
View(lpa_model_eval)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "poLCA")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data2 <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav")
data2 %>% colnames()
data %>% select(gender, gender2, gender3) %>% head()
data2 %>% select(gender, gender2, gender3) %>% head()
data2 %>% select("gender", "gender2", "gender3") %>% head()
data2$gender
data2 %>% select(gender)
data2 %>% select("gender")
data2 %>% as.tibble() %>% select(gender)
data2 %>% subset(select=c(gender, gender2, gender3))
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "poLCA")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select()(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
rm(gender)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender)
gender %>% table()
gender %>% head()
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender = 2) %>% dplyr::select(-gender)
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
View(data_males)
library(dplyr)
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% select(-gender)
select <- dplyr::select()
select <- dplyr::select
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% select(-gender)
data_males %>% select(meffort) %>% table()

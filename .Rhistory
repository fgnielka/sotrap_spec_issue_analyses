theme(legend.position="none") +
theme_classic()
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
theme_classic() +
theme(legend.position="none", axis.ticks.x = c(0.0, 0.5, 1.0))
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
?theme
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +4
scale_x_discrete(breaks=c(0.0, 0.5, 1.0)) +
theme_classic() +
theme(legend.position="none")
})
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +4
scale_x_discrete(breaks=c("0.0", "0.5", "1.0")) +
theme_classic() +
theme(legend.position="none")
})
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
scale_x_discrete(breaks=c("0.0", "0.5", "1.0")) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
scale_x_discrete(breaks=c(0.0, 0.5, 1.0)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
scale_y_discrete(breaks=c(0.0, 0.5, 1.0)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
ylim(0,1) +
scale_y_continuous(breaks=c(0.0, 0.5, 1.0)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
scale_y_continuous(breaks=c(0.0, 0.5, 1.0)) +
ylim(0,1) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
?scale_y_continuous
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
scale_y_continuous(breaks=c(0.0, 0.5, 1.0), limits=c(0,1)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=plots, ncol=4, nrow=4)
plot_results_2 <- results %>%
select(Proclivity,starts_with("odds")) %>%
filter(odds_predicted_class_1_0.01 > 1 | odds_predicted_class_2_0.01 > 1 | odds_predicted_class_3_0.01 > 1) %>%
pivot_longer(cols=starts_with("odds"), names_to="class", values_to="odds")
plot_results_2$class <- rep(1:3, nrow(plot_results)/3)
plot_results_2$class <- rep(1:3, nrow(plot_results_2)/3)
lapply(plot_results_2$Proclivity %>% unique(), function(x){
ggplot(plot_results_2 %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
#scale_y_continuous(breaks=c(0.0, 0.5, 1.0), limits=c(0,1)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=2)
plots_2 <- lapply(plot_results_2$Proclivity %>% unique(), function(x){
ggplot(plot_results_2 %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
#scale_y_continuous(breaks=c(0.0, 0.5, 1.0), limits=c(0,1)) +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
plots[[2]]
plots[[2]] <- plots[[2]] + labels(x="")
plots[[2]] <- plots[[2]] + labels(xlab="")
?labels
?xlab
plots[[2]] <- plots[[2]] + xlab("")
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
t <- ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
scale_y_continuous(breaks=c(0.0, 0.5, 1.0), limits=c(0,1)) +
xlab("") +
ylab("") +
theme_classic() +
theme(legend.position="none")
plots_2 <- lapply(plot_results_2$Proclivity %>% unique(), function(x){
ggplot(plot_results_2 %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
xlab("") +
ylab("") +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
plots <- lapply(plot_results$Proclivity %>% unique(), function(x){
ggplot(plot_results %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
scale_y_continuous(breaks=c(0.0, 0.5, 1.0), limits=c(0,1)) +
xlab("") +
ylab("") +
theme_classic() +
theme(legend.position="none")
})
plots_2 <- lapply(plot_results_2$Proclivity %>% unique(), function(x){
ggplot(plot_results_2 %>% filter(Proclivity == x), aes(x=class, y=odds, fill=as.factor(class))) +
scale_fill_manual(name=NULL, values=c("#CCCCCC", "#999999", "#666666")) +
geom_bar(stat="identity", position="dodge") +
xlab("") +
ylab("") +
theme_classic() +
theme(legend.position="none")
})
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
plots[[1]] <- plots[[1]] + ylab("Odds")
plots[[7]] <- plots[[7]] + yla("Odds")
plots[[7]] <- plots[[7]] + ylab("Odds")
plots[[1]] <- plots[[1]] + ylab("Odds")
plots[[7]] <- plots[[7]] + ylab("Odds")
plots[[12]] <- plots[[12]] + xlab("Class")
plots[[13]] <- plots[[13]] + xlab("Class") + ylab("Odds")
plots[[14]] <- plots[[14]] + xlab("Class")
plots[[15]] <- plots[[15]] + xlab("Class")
plots_2[[1]] <- plots_2[[1]] + xlab("Class")
plots_2[[2]] <- plots_2[[2]] + xlab("Class")
plots_2[[3]] <- plots_2[[3]] + xlab("Class")
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
ggplot(plot_results, aes(x=Proclivity, y=odds, group=class)) +
geom_line()
ggplot(plot_results, aes(x=Proclivity, y=odds, group=class, linetype=class)) +
geom_line()
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line()
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
scale_linetype_manual(name=NULL, values=c("solid", "dashed", "dotted"), labels=c("Class 1", "Class 2", "Class 3"))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
ylab("Odds")
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
ylab("Odds") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=10))
?scale_shape_manual
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c("4", "5", "16")) +
ylab("Odds") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c("4", "5", "16"), labels=c("Class 1", "Class 2", "Class 3")) +
ylab("Odds") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
gplot(plot_results_2, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggplot(plot_results_2, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point() +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0, 1, 3)) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0, 1, 3)) +
guides(shape="none") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggarrange(lp1, lp1, ncol=1, nrow=2)
lp_1 <- ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0,  3, 1)) +
guides(shape="none") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
lp_2 <- ggplot(plot_results_2, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0,  3, 1)) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
ggarrange(lp_1, lp_2, ncol=1, nrow=2)
#Arrange all barplots in a grid
ggarrange(plotlist=c(plots, plots_2), ncol=6, nrow=3)
#Alternative: line plots
#Odds < 1
ggplot(plot_results, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0,  3, 1)) +
guides(shape="none") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
#Odds > 1
ggplot(plot_results_2, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0,  3, 1)) +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
#Odds > 1
ggplot(plot_results_2, aes(x=Proclivity, y=odds, group=as.factor(class), linetype=as.factor(class))) +
geom_line() +
geom_point(aes(shape=as.factor(class))) +
scale_linetype_manual(name=NULL, values=c("dotted", "dashed", "solid"), labels=c("Class 1", "Class 2", "Class 3")) +
scale_shape_manual(name=NULL, values=c(0,  3, 1)) +
guides(shape="none") +
theme_classic() +
theme(axis.text.x=element_text(angle=45, hjust=1, size=8))
#Do not show code chunks in the knitted document
knitr::opts_chunk$set(echo=F, warning=F, message=F)
#For reproducible results
set.seed(100)
#Turn off scientific notification
options(scipen=999)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM", "MOTE", "flextable", "logistf")
#Load function to check whether required packages are installed & load required packages
source("./functions/check_required_packages.R")
check_required_packages(packages)
lapply(packages, require, character.only=T)
#Clean up
rm(packages)
#######ATTENTION!!!
#At this point we load a pre-saved .RData file in which the environment is saved. That makes the code less reproducible, but removing the eval=F specifications in all code blocks will make that possible
load(".RData")
haven::read_spss("./data/data raw/dataE_2112.sav") %>% filter(gender == 2)  %>% filter(range_young1 < 15) %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
View(BCH_expanded_dataframe)
CASE_yp <-  haven::read_spss("./data/data raw/dataE_2112.sav") %>% filter(gender == 2)  %>% filter(range_young1 < 15) %>% dplyr::select(CASE)
data_males %>% filter(CASE %in% CASE_yp)
CASE_yp <-  haven::read_spss("./data/data raw/dataE_2112.sav") %>% filter(gender == 2)  %>% filter(range_young1 < 15) %>% dplyr::select(CASE) %>% unlist()
data_males %>% filter(CASE %in% CASE_yp)
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp)
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Youth"))
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("young"))
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Young"))
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Y"))
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Yp"))
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Yp") %>% colnames()
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Yp")) %>% colnames()
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Yp")) %>% colnames()
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp") %>% colnames()
length(logregs) <- length(Yp_variables)
logregs_yp <- list()
length(logregs_yp) <- length(Yp_variables)
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp") %>% colnames()
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp") %>% colnames()
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp")) %>% colnames()
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp")) %>% colnames()
Yp_variables <- BCH_expanded_dataframe %>% select(contains("Yp")) %>% colnames()
logregs_yp <- list()
length(logregs_yp) <- length(Yp_variables)
Yp_variables
predictors
Yp_models <- paste(Yp_variables, "~", predictors, sep=" ")
Yp_models
1:length(Yp_models)
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(weights_2)
View(BCH_expanded_dataframe)
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(modal_weight_3)
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(modal_weight_3) %>% length()
logregs_yp <- lapply(Yp_models, function(x){
logistf(x,data=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% select(contains("Youth")),
weights=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(modal_weight_3)) %>%
flic()
})
Yp_models
logregs_yp <- lapply(Yp_models, function(x){
logistf(x,data=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp),
weights=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(modal_weight_3)) %>%
flic()
})
BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp) %>% pull(modal_weight_3)
BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp]
BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp,]
BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp,]$modal_weight_2
logregs_yp <- lapply(Yp_models, function(x){
logistf(x,data=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp),
weights=BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp,]$modal_weight_2) %>%
flic()
})
View(BCH_results)
logregs_yp <- lapply(Yp_models, function(x){
logistf(x,data=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp),
weights=BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp,]$modal_weight_2) %>%
flic()
})
logregs_yp_0.01 <- lapply(Yp_models, function(x){
logistf(x,data=BCH_expanded_dataframe %>% filter(CASE %in% CASE_yp),
weights=BCH_expanded_dataframe[BCH_expanded_dataframe$CASE %in% CASE_yp,]$modal_weight_3) %>%
flic()
})
Yp_variables
paste(Yp_variables, "_prob", sep="")
paste(Yp_variables, "_red", sep="")
c(colnames(BCH_expanded_dataframe %>% select(starts_with("Y_"))),paste(Yp_variables, "_red", sep=""))
BCH_results <- tibble(outcomes = c(colnames(BCH_expanded_dataframe %>% select(starts_with("Y_"))),paste(Yp_variables, "_red", sep="")))
c(log_regs,logregs_yp)
BCH_results <- tibble(outcomes = c(colnames(BCH_expanded_dataframe %>% select(starts_with("Y_"))),paste(Yp_variables, "_red", sep="")))
#Combine the results in a dataframe
BCH_results <- BCH_results %>% mutate(models = c(log_regs,logregs_yp))
BCH_results <- BCH_results %>% mutate(models_0.01_weights = c(log_regs_min,logregs_yp_0.01))
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
#Because of the case weights we have to test the parameters manually via likelihood ratio tests
BCH_results <- BCH_results %>% mutate(
lr_1 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_2),
lr_2 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_2),
lr_3 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_2),
lr_total = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_2))
BCH_results <- BCH_results %>% mutate(
lr_1_0.01 = lapply(BCH_results$models, logistftest, test=1, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_2_0.01 = lapply(BCH_results$models, logistftest, test=2, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_3_0.01 = lapply(BCH_results$models, logistftest, test=3, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")),
lr_total_0.01 = lapply(BCH_results$models, logistftest, weights=BCH_expanded_dataframe$modal_weight_3,control = logistf.control(fit="IRLS")))
BCH_results <- BCH_results %>% mutate(
p_1=lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p2=lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p3=lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_1_0.01=lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_2_0.01=lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_3_0.01=lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
)
#Order BCH_results
BCH_results <- BCH_results[order(BCH_results$outcomes),]
lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist()
View(BCH_results)
BCH_results$outcomes
BCH_results$outcomes %>% sort()
BCH_results$outcomes == BCH_results$outcomes %>% sort()
BCH_results_parameters <-tibble(outcomes = cBCH_results$outcomes,
b_intercept = lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist(),
b_predicted_class_1 = lapply(BCH_results$models, function(x){x$coefficients[2]}) %>% unlist(),
b_predicted_class_2 =lapply(BCH_results$models, function(x){x$coefficients[3]}) %>% unlist(),
b_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[1]}) %>%
unlist(),
b_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[2]}) %>%
unlist(),
b_predicted_class_2_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[3]}) %>%
unlist(),
ci_l_intercept = lapply(BCH_results$models, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1 =lapply(BCH_results$models, function(x){x$ci.lower[2]}) %>% unlist(),
ci_l_predicted_class_2 =lapply(BCH_results$models, function(x){x$ci.lower[3]}) %>% unlist(),
ci_l_intercept_0.01= lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[2]}) %>%
unlist(),
ci_l_predicted_class_2_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[3]}) %>%
unlist(),
ci_r_intercept =lapply(BCH_results$models, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1=lapply(BCH_results$models, function(x){x$ci.upper[2]}) %>% unlist(),
ci_r_predicted_class_2=lapply(BCH_results$models, function(x){x$ci.upper[3]}) %>% unlist(),
ci_r_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[2]}) %>%
unlist(),
ci_r_predicted_class_2_0.01  = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[3]}) %>%
unlist(),
p_lr_intercept = lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1 = lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2 = lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_lr_intercept_0.01 = lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1_0.01 = lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2_0.01 = lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
p_lr_total = lapply(BCH_results$lr_total, function(x){x$prob}) %>% unlist(),
p_lr_total_0.01 = lapply(BCH_results$lr_total_0.01, function(x){x$prob}) %>% unlist())
BCH_results_parameters <-tibble(outcomes = BCH_results$outcomes,
b_intercept = lapply(BCH_results$models, function(x){x$coefficients[1]}) %>% unlist(),
b_predicted_class_1 = lapply(BCH_results$models, function(x){x$coefficients[2]}) %>% unlist(),
b_predicted_class_2 =lapply(BCH_results$models, function(x){x$coefficients[3]}) %>% unlist(),
b_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[1]}) %>%
unlist(),
b_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[2]}) %>%
unlist(),
b_predicted_class_2_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$coefficients[3]}) %>%
unlist(),
ci_l_intercept = lapply(BCH_results$models, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1 =lapply(BCH_results$models, function(x){x$ci.lower[2]}) %>% unlist(),
ci_l_predicted_class_2 =lapply(BCH_results$models, function(x){x$ci.lower[3]}) %>% unlist(),
ci_l_intercept_0.01= lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[1]}) %>% unlist(),
ci_l_predicted_class_1_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[2]}) %>%
unlist(),
ci_l_predicted_class_2_0.01=lapply(BCH_results$models_0.01_weights, function(x){x$ci.lower[3]}) %>%
unlist(),
ci_r_intercept =lapply(BCH_results$models, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1=lapply(BCH_results$models, function(x){x$ci.upper[2]}) %>% unlist(),
ci_r_predicted_class_2=lapply(BCH_results$models, function(x){x$ci.upper[3]}) %>% unlist(),
ci_r_intercept_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[1]}) %>% unlist(),
ci_r_predicted_class_1_0.01 = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[2]}) %>%
unlist(),
ci_r_predicted_class_2_0.01  = lapply(BCH_results$models_0.01_weights, function(x){x$ci.upper[3]}) %>%
unlist(),
p_lr_intercept = lapply(BCH_results$lr_1, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1 = lapply(BCH_results$lr_2, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2 = lapply(BCH_results$lr_3, function(x){x$prob}) %>% unlist(),
p_lr_intercept_0.01 = lapply(BCH_results$lr_1_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_1_0.01 = lapply(BCH_results$lr_2_0.01, function(x){x$prob}) %>% unlist(),
p_lr_predicted_class_2_0.01 = lapply(BCH_results$lr_3_0.01, function(x){x$prob}) %>% unlist(),
p_lr_total = lapply(BCH_results$lr_total, function(x){x$prob}) %>% unlist(),
p_lr_total_0.01 = lapply(BCH_results$lr_total_0.01, function(x){x$prob}) %>% unlist())
View(BCH_results_parameters)
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red")
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights)
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights) %>% summary()
BCH_results %>% filter(outcomes == "Y_proclPornYp_r_red") %>% pull(models_0.01_weights) %>% flatten() %>% summary()
#Save output to RDS.
BCH_results %>% saveRDS(file="./out/BCH_results.RDS")
#Save Parameters Table to RDS
BCH_results_parameters %>% saveRDS(file="./out/BCH_results_parameters.RDS")
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")

knitr::opts_chunk$set(echo = TRUE)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data <- haven::read_spss("./data/data_raw/dataE_clear5 2209.sav")
data <- haven::read_spss("./data/data_raw/dataE_clear5 2209.sav")
data <- haven::read_spss("./data/data_raw/dataE_clear5 2209.sav")
knitr::opts_chunk$set(echo = TRUE)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
colnames(data) <- c("uid", "sex_drive", "csbd", "ppcs", "soi-r_me", "social_anxiety", "lon", "mvs", "attraction_to_children")
updateR()
install.packages("installr")
installr::updateR()
installr::updateR()
knitr::opts_chunk$set(echo = TRUE)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
colnames(data) <- c("uid", "sex_drive", "csbd", "ppcs", "soi-r_me", "social_anxiety", "lon", "mvs", "attraction_to_children")
###Distribution plots####
dens_plots <- list()
##sex drive
dens_plots[["sex_drive"]]<-ggplot(data, aes(x=sex_drive)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##csbd
dens_plots[["csbd"]]<-ggplot(data, aes(x=csbd)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##ppcs
dens_plots[["ppcs"]]<-ggplot(data, aes(x=ppcs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##soi-r_me
dens_plots[["soi-r_me"]]<-ggplot(data, aes(x="soi-r_me")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##social anxiety
dens_plots[["social_anxiety"]]<-ggplot(data, aes(x=social_anxiety)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##lon
dens_plots[["lon"]]<-ggplot(data, aes(x=lon)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##mvs
dens_plots[["mvs"]]<-ggplot(data, aes(x=mvs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##attraction to children
dens_plots[["attraction_to_children"]]<-ggplot(data, aes(x=attraction_to_children)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
names(dens_plots)
ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi-r_me"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
install.packages("ggpubr")
ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi-r_me"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
View(dens_plots)
dens_plots[["sex_drive"]]
dens_plots[[2]]
dens_plots[[3]]
dens_plots[[4]]
data %>% pull(soi-r_me) %>% str()
data %>% pull("soi-r_me"") %>% str()
data %>% pull("soi-r_me") %>% str()
data %>% pull("csbd") %>% str()
dens_plots[[5]]
dens_plots[[6]]
dens_plots[[7]]
dens_plots[[8]]
ggplot(data, aes(x="soi-r_me")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=soi-r_me)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=´soi-r_me´)) +
ggplot(data, aes(x=`soi-r_me`)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
colnames(data) <- c("uid", "sex_drive", "csbd", "ppcs", "soi_r_me", "social_anxiety", "lon", "mvs", "attraction_to_children")
##soi-r_me
dens_plots[["soi_r_me"]]<-ggplot(data, aes(x="soi-r_me")) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi-r_me"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
View(dens_plots)
##soi-r_me
dens_plots[["soi_r_me"]]<-ggplot(data, aes(x=soi_r_me)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
names(data)
densplots[["dens_grid"]]<-ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
dens_plots[["dens_grid"]]<-ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
dens_plots[["dens_grid"]]
ggpubr::ggarrange(dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=4,
nrow=2
)
dens_plots[["dens_grid"]]<-ggpubr::ggarrange(
dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=5,
nrow=2
)
dens_plots[["dens_grid"]]
choose_BIC <- mclustBIC(data %>% select(-uid), prior = priorControl())
choose_BIC
3:7
lpa <- Mclust(data %>% select(-uid), prior=priorControl(), G=3:7, modelNames=c("VVV"))
View(lpa)
lpa
lpa_models <- list()
as.character(1)
lpa_models <- list()
for (i in 3:7){
lpa_models[[as.character(i)]] <- Mclust(data %>% select(-uid), prior=priorControl(), G=i, modelNames=c("VVV"))
}
plot(choose_BIC)
summary(lpa_models[["3"]])
summary(lpa_models[["3"]], parameters=TRUE)
scipen=F
scipen=0
options(scipen=0)
summary(lpa_models[["3"]], parameters=TRUE)
lpa_models[["3"]]$uncertainty
plot(lpa_models[["3"]], what="uncertainty")
quantile(lpa_models[["3"]]$uncertainty)
options(scipen = 999)
quantile(lpa_models[["3"]]$uncertainty)
3.3619e-01
1.3921e-03
lpa_models[["7"]]
summary(lpa_models[["7"]])
summary(lpa_models[["7"]], parameters = TRUE)
summary(lpa_models[["4"]])
summary(lpa_models[["4"]], parameters=TRUE)
quantiles(lpa_models[["4"]]$uncertainty)
quantile(lpa_models[["4"]]$uncertainty)
knitr::opts_chunk$set(echo = TRUE)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
??createMulitfFolds
install.packages("caret")
View(data)
folds <- createMuliFolds(data %>% select(-uid), k=5, times=10)
folds <- caret::createMultiFolds(data %>% select(-uid), k=5, times=10)
View(folds)
View(data)
folds[[1]]
View(data)
folds <- caret::createMultiFolds(data %>% pull(uid), k=5, times=10)
View(data)
folds[[1]]
View(lpa_models)
knitr::opts_chunk$set(echo = TRUE)
source("./functions/Cosine Similarity.R")
#Computes the dunn index with cosine similarity instead of euclidean distances.
lpa_models <- lpa_models %>% mutate(cv_dunn_cos = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the Dunn index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid) %>% cos_dissim
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::dunn(distance=distance, clusters=clusters))
}) %>% unlist())
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
source("./functions/Cosine Similarity.R")
#Computes the dunn index with cosine similarity instead of euclidean distances.
lpa_models <- lpa_models %>% mutate(cv_dunn_cos = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the Dunn index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid) %>% cos_dissim
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::dunn(distance=distance, clusters=clusters))
}) %>% unlist())
#Computes the dunn index with cosine similarity instead of euclidean distances.
lpa_models <- lpa_models %>% mutate(cv_dunn_cos = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the Dunn index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid) %>% cos_dissim
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::dunn(distance=distance, clusters=clusters))
}) %>% unlist())
#Computes the dunn index based on euclidean distances
lpa_models <- lpa_models %>% mutate(cv_dunn = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the Dunn index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid)
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::dunn(Data=distance, clusters=clusters, method = "euclidean"))
}) %>% unlist())
#creating connectivity index based on cosine dissimilarity
lpa_models <- lpa_models %>% mutate(cv_conn_cos = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the connectivity index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid) %>% cos_dissim
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::connectivity(distance=distance, clusters=clusters))
}) %>% unlist())
#creating Connectivity index for euclidean distances
lpa_models <- lpa_models %>% mutate(cv_conn = lapply(1:nrow(lpa_models),function(x){
#Get a distance measure to base the Dunn index on. Cosine is nice, because the scale differences are less important as with euclidean distances.
distance <- data[data$uid %in% (lpa_models[x,c("test_fold_uids")] %>% unlist()),] %>% select(-uid)
#Get predicted cluster memberships
clusters <- (lpa_models[x,] %>% pull(cv_predicted_clusters) %>% unlist())
#feed both in the dunn function from the clValid package
return(clValid::connectivity(Data=distance, clusters=clusters, method = "euclidean"))
}) %>% unlist())
lpa_model_eval <- lpa_models %>% group_by(nclust) %>% summarize(conn_cos = mean(cv_conn_cos), conn = mean(cv_conn), dunn = mean(cv_dunn), dunn_cos = mean(cv_dunn_cos), sil=mean(cv_silhouette))
View(lpa_models)
View(lpa_model_eval)
results <- lpa_models %>% select(nclust, fold, rep, test_fold_uids, cv_predicted_clusters)
results <- results %>% select(-test_fold_uids, -cv_predicted_clusters) %>% unite("dat_name", nclust:fold:rep, sep="_")
View(results)
results <- lpa_models %>% select(nclust, fold, rep, test_fold_uids, cv_predicted_clusters)
results <- results %>% select(-test_fold_uids, -cv_predicted_clusters) %>% unite("dat_name", nclust:fold:rep, sep="_,", remove=FALSE) %>% select(-nclust, -fold,-rep)
View(results)
results <- lpa_models %>% select(nclust, fold, rep, test_fold_uids, cv_predicted_clusters)
results <- results %>% select(-test_fold_uids, -cv_predicted_clusters) %>% unite("dat_name", nclust:fold:rep, sep="_,", remove=FALSE) %>% select(-nclust, -fold,-rep)
View(results)
results <- lpa_models %>% select(nclust, fold, rep, test_fold_uids, cv_predicted_clusters)
results <- results  %>% unite("dat_name", nclust:fold:rep, sep="_,", remove=FALSE) %>% select(-nclust, -fold,-rep)
View(results)
results <- lpa_models %>% select(nclust, fold, rep, test_fold_uids, cv_predicted_clusters)
results <- results  %>% unite("dat_name", nclust:fold:rep, sep="_", remove=FALSE) %>% select(-nclust, -fold,-rep)
results[1,c("dat_name")]
results[1,c("dat_name")] %>% str()
results[1,c("dat_name")] %>% class()
paste("./data/data_prepared/",results[1,c("dat_name")],".csv")
paste("./data/data_prepared/",results[1,c("dat_name")],".csv", sep="")
for (i in 1:nrow(results)){
t <- tibble(uids = results[i,] %>% pull(test_fold_uids) %>% unlist(), cluster = results[i,] %>% pull(cv_predicted_clusters) %>% unlist())
name <- paste("./data/data_prepared/",results[i,c("dat_name")],".csv", sep="")
readr::write_csv(data=t, file=name)
}
for (i in 1:nrow(results)){
t <- tibble(uids = results[i,] %>% pull(test_fold_uids) %>% unlist(), cluster = results[i,] %>% pull(cv_predicted_clusters) %>% unlist())
name <- paste("./data/data_prepared/",results[i,c("dat_name")],".csv", sep="")
readr::write_csv(x=t, file=name)
}
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")

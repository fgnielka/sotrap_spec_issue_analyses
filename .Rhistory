predict(newdata=data[data$uid %in% (optics_models[1,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$models[[1]] %>% extractDBSCAN(eps_cl = optics_models$models[[1]]$eps),
data = data[optics_models$folds[[1]],] %>% select(-uid)
)
View(lpa_models)
optics_models <- optics_models %>% mutate(cv_predicted_clusters = lapply(1:nrow(optics_models), function(i){predict(newdata=data[data$uid %in% (optics_models[i,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$models[[i]] %>% extractDBSCAN(eps_cl = optics_models$models[[i]]$eps),
data = data[optics_models$folds[[i]],] %>% select(-uid))}))
optics_models$models[[1]]$minPts
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "dbscan")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts)
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
test_plot <- kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
test_plot %>% str()
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1)
kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
devtools::install_github("etam4260/kneedle")
install.packages("devtools")
devtools::install_github("etam4260/kneedle")
dist <- kNNdist(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
dist
1:length(dist)
kneedle::kneedle(x=1:length(dist), y=dist)
kNNdistplot(x=data[optics_models$folds[[1]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[1]]$minPts-1) %>% sort()
kneedle::kneedle(x=1:length(dist), y=dist, concave=FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=FALSE, decreasing = FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 2)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 3)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 4)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 10)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 12)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)
dist <- kNNdist(x=data[optics_models$folds[[2]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[2]]$minPts-1) %>% sort()
kNNdistplot(x=data[optics_models$folds[[2]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[2]]$minPts-1) %>% sort()
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15) %>% class()
kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2]
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% class()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% list_flatten() %>% class()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15))
}) %>% unlist()
lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2])
}) %>% unlist()
optics_models <- optics_models %>% mutate(epsilon_clust = lapply(1:nrow(optics_models),function(i){
dist <- kNNdist(x=data[optics_models$folds[[i]],] %>% select(-uid) %>% as.matrix(), k=optics_models$models[[i]]$minPts-1) %>% sort()
return(kneedle::kneedle(x=1:length(dist), y=dist, concave=TRUE, decreasing = FALSE, sensitivity = 15)[2])
}) %>% unlist())
optics_models$epsilon_clust[1]
optics_models <- optics_models %>% mutate(DBSCAN_clustering = lapply(1:nrow(optics_models), function(i){
optics_models$models[[i]] %>% extractDBSCAN(eps_cl = optics_models$epsilon_clust[i])
}))
optics_models <- optics_models %>% mutate(cv_predicted_clusters = lapply(1:nrow(optics_models), function(i){
predict(newdata=data[data$uid %in% (optics_models[i,] %>% pull(test_fold_uids) %>%unlist()),] %>% select(-uid),
object =optics_models$DBSCAN_clustering[[i]],
data = data[optics_models$folds[[i]],] %>% select(-uid))}))
optics_models$cv_predicted_clusters[[1]] %>% table()
optics_models$cv_predicted_clusters[[2]] %>% table()
optics_models$cv_predicted_clusters[[3]] %>% table()
optics_models$cv_predicted_clusters[[4]] %>% table()
optics_models$DBSCAN_clustering[[4]]
lapply(optics_models$cv_predicted_clusters, table) %>% list_flatten()
rm(test_folds, train_folds, t, test, optics_models_safe)
View(results)
rm(results)
View(optics_models)
optics_models <- optics_models %>% select(-"0.001_Xi", -"0.005_Xi", -"0.01_Xi", -"0.05_Xi", -0.1_Xi)
optics_models <- optics_models %>% select(-"0.001_Xi", -"0.005_Xi", -"0.01_Xi", -"0.05_Xi", -"0.1_Xi")
optics_models <- optics_models %>% select(-value)
?Mclust::Mclust()
?Mclust::Mclust
View(data)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "mclust")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
View(lpa_models)
View(lpa_model_eval)
View(lpa_model_eval)
View(optics_models)
full <- data %>% select(-uid) %>% Mclust(, prior = priorControl(), modelNames=c("VVV"))
full
summary(full)
plot(full, what="classification")
###Distribution plots####
dens_plots <- list()
##sex drive
dens_plots[["sex_drive"]]<-ggplot(data, aes(x=sex_drive)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##csbd
dens_plots[["csbd"]]<-ggplot(data, aes(x=csbd)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##ppcs
dens_plots[["ppcs"]]<-ggplot(data, aes(x=ppcs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##soi-r_me
dens_plots[["soi_r_me"]]<-ggplot(data, aes(x=soi_r_me)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##social anxiety
dens_plots[["social_anxiety"]]<-ggplot(data, aes(x=social_anxiety)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##lon
dens_plots[["lon"]]<-ggplot(data, aes(x=lon)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##mvs
dens_plots[["mvs"]]<-ggplot(data, aes(x=mvs)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
##attraction to children
dens_plots[["attraction_to_children"]]<-ggplot(data, aes(x=attraction_to_children)) +
geom_histogram(aes(y=..density..), colour="black", fill="white")+
geom_density(alpha=.2, fill="#FF6666")
dens_plots[["dens_grid"]]<-ggpubr::ggarrange(
dens_plots[["sex_drive"]],
dens_plots[["csbd"]],
dens_plots[["ppcs"]],
dens_plots[["soi_r_me"]],
dens_plots[["mvs"]],
dens_plots[["social_anxiety"]],
dens_plots[["lon"]],
dens_plots[["mvs"]],
dens_plots[["attraction_to_children"]],
ncol=5,
nrow=2
)
```{r outlier_detection}
install.packages("polLCA")
plot(full, what="classification")
View(dens_plots)
dens_plots[["dens_grid"]]
install.packages("polLCA")
library(polLCA)
install.packages("poLCA")
dbcv <- readr::read_csv(".\data\data_prepared\LPA_cv_predicted_clusters\dbcv_dat.csv") %>% as.tibble()
dbcv <- readr::read_csv("./data/data_prepared/LPA_cv_predicted_clusters/dbcv_dat.csv") %>% as.tibble()
View(dbcv)
View(dbcv)
dbcv <- readr::read_csv("./data/data_prepared/LPA_cv_predicted_clusters/dbcv_dat.csv") %>% as.tibble() %>% select(dbcv)
View(lpa_models)
lpa_models <- lpa_models %>% mutate(dbcv = dbcv)
lpa_models %>% colnames()
rm(dbcv)
View(names)
View(lpa)
rm(dbcv, lpa)
rm(dbcv, lpa, names)
View(folds)
View(lpa_models)
View(folds)
rm(folds)
View(lpa_models)
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T))
lpa_models <- lpa_models %>% mutate("dbcv" = dbcv)
colnames(lpa_models)
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv, na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean("dbcv", na.rm=T))
lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T))
lpa_model_eval <- lpa_model_eval %>% mutate(dbcv = lpa_models %>% group_by(nclust) %>% summarize(dbcv = mean(dbcv$dbcv, na.rm=T)) %>% select(dbcv))
View(lpa_model_eval)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "poLCA")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data2 <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav")
data2 %>% colnames()
data %>% select(gender, gender2, gender3) %>% head()
data2 %>% select(gender, gender2, gender3) %>% head()
data2 %>% select("gender", "gender2", "gender3") %>% head()
data2$gender
data2 %>% select(gender)
data2 %>% select("gender")
data2 %>% as.tibble() %>% select(gender)
data2 %>% subset(select=c(gender, gender2, gender3))
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "poLCA")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select()(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr)
rm(gender)
gender <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender)
gender %>% table()
gender %>% head()
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender = 2) %>% dplyr::select(-gender)
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
View(data_males)
library(dplyr)
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% select(-gender)
select <- dplyr::select()
select <- dplyr::select
data_females <- haven::read_spss("./data/data raw/dataE_clear5 2209.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% select(-gender)
data_males %>% select(meffort) %>% table()
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "poLCA")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
#We are loading the gender encoding in the analysis script.
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss(".\data\data raw\dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
#We are loading the gender encoding in the analysis script.
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
View(data_males)
??poLCA
summary(data_males)
install.packages("tidysSEM")
install.packages("tidySEM")
View(data_males)
colnames(data_males)
data_males$sexdrive2 %>% unique()
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
data_males$sexdrive2 %>% unique()
data_males$CSBD %>% unique()
data_males$PPCS_6 %>% unique()
data_males$meffort %>% unique()
data_males$socialanx %>% unique()
data_males$lon %>% unique()
data_males$mvalue %>% unique()
data_males$attr %>% unique()
data_males$mvalue %>% table()
data_males %>% select(-CASE)
desc_m <- tidySEM::descriptives(data_males %>% select(-CASE))
desc_m <- desc_m %>% select(name, type, n, missing, unique, mode, mode_value, v)
desc_m
vignette(forcats)
vignette(package="forcats")
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
??cut_number
rm(data2)
rm(gender)
View(full)
test <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4)
View(test)
test <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
test$sexdrive2 %>% head()
test$sexdrive2 %>% class()
test <- lapply(test, ordered) %>% as.tibble()
View(test)
test$sexdrive2 %>% class()
test$sexdrive2 %>% summarise()
test$sexdrive2 %>% str()
apply(test, 2, str )
apply(test, 2, function(x){pull(x) %>% str()} )
test$sexdrive2 %>% str()
test$CSBD %>% str()
View(test)
describe(test)
summary(test)
str(test$CSBD)$levels
test_factor <- test$CSBD
test_factor
test_factor$LEvels
test_factor$Levels
attr(test_factor)$Levels
attr(test_factor, "Levels")
attr(test_factor)
attributes(test_factor)
attr(test_factor, "levels")
test_factor %>% head()
apply(test, 2, head())
apply(test, 2, head
)
test$CSBD %>% head()
test$PPCS_6 %>% head()
test$meffort %>% head()
test$socialanx %>% head()
test$lon %>% head()
test$mvalue %>% head()
data_males <- cbind(data_males$CASE, m_factor, data_males$attr)
m_factor <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
m_factor <- lapply(m_factor, ordered) %>% as.tibble()
data_males <- cbind(data_males$CASE, m_factor, data_males$attr)
data_males$`data_males$attr` %>% str()
data_males$`data_males$attr` %>% table()
data_males %>% mutate(attr  = case_when(`data_males$attr` == 0 ~ "no attraction", `data_males$attr` > 0 ~ "some attraction"))
data_males <- cbind(data_males$CASE, m_factor, data_males$attr) %>% mutate(attr  = case_when(`data_males$attr` == 0 ~ "no attraction", `data_males$attr` > 0 ~ "some attraction"))
#We are loading the gender encoding in the analysis script.
#Apparently a 2 represents a male. We want to only grab males.
data_males <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 2) %>% dplyr::select(-gender)
data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
m_factor <- lapply(data_males %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
m_factor <- lapply(m_factor, ordered) %>% as.tibble()
data_males <- cbind(data_males$CASE, m_factor, data_males$attr) %>% mutate(attr  = case_when(`data_males$attr` == 0 ~ "no attraction", `data_males$attr` > 0 ~ "some attraction"))
View(data_males)
colnames(data_males)[1]<-"CASE"
View(data_males)
View(data_males)
data_males <- data_males %>% select(-`data_males$attr`)
View(data_males)
data_males <- data_males %>% mutate(attr = attr %>% ordered())
data_males$attr
rm(tesst)
rm(test)
rm(test_factor)
data_males$attr %>% table()
f_factor <- lapply(data_females %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
data_females <- cbind(data_females$CASE, f_factor, data_females$attr) %>% mutate(attr  = case_when(`data_females$attr` == 0 ~ "no attraction", `data_females$attr` > 0 ~ "some attraction"))
f_factor <- lapply(data_females %>% select(-CASE, -attr),cut_number, n=4) %>% as.tibble()
data_females %>% str()
data_females %>% summary()
cut_number(data_females$sexdrive2, n=4)
cut_number(data_females$CSBD, n=4)
cut_number(data_females$PPCS_6, n=4)
cut_number(data_females$meffort, n=4)
cut_number(data_females$meffort, n=4)
cut_number(data_females$socialanx, n=4)
cut_number(data_females$lon, n=4)
cut_number(data_females$mvalue, n=4)
cut_number(data_females$CSBD, n=3)
cut_number(data_females$CSBD, n=3) %>% table()
cut_number(data_females$PPCS_6, n=3)
cut_number(data_females$PPCS_6, n=2)
cut_number(data_females$PPCS_6, n=2) %>% tables()
cut_number(data_females$PPCS_6, n=2) %>% table()
cut_number(data_females$CSBD, n=2) %>% table()
f_factor <- lapply(data_females %>% select(-CASE, -attr, -CSBD, -PPCS_6),cut_number, n=4) %>% as.tibble()
f_factor <- lapply(f_factor, ordered) %>% as.tibble()
data_females <- cbind(data_females$CASE, f_factor, data_females$attr) %>% mutate(attr  = case_when(`data_females$attr` == 0 ~ "no attraction", `data_females$attr` > 0 ~ "some attraction"))
data_females <- data_females %>% select(-`data_females$attr`)
data_females <- data_females %>% mutate(attr = attr %>% ordered())
colnames(data_females)[1]<-"CASE"
data_females <- data_females %>% mutate(PPCS_6 = cut_number(PPCS_6, n=2), CSBD = cut_number(CSBD, n=2))
data_females <- data_females %>% mutate(PPCS_6 = cut_number(data_females$PPCS_6, n=2) %>% ordered(), CSBD = cut_number(data_females$CSBD, n=2) %>% ordered())
cut_number(data_females$PPCS_6,n=2)
cut_number(data_females$PPCS_6, n=2) %>% table()
View(data_females)
data_females <- haven::read_spss("./data/data raw/dataE_2112.sav") %>% dplyr::select(gender, CASE, sexdrive2, CSBD, PPCS_6, meffort, socialanx, lon, mvalue, attr) %>% filter(gender == 1) %>% dplyr::select(-gender)
f_factor <- lapply(data_females %>% select(-CASE, -attr, -CSBD, -PPCS_6),cut_number, n=4) %>% as.tibble()
f_factor <- lapply(f_factor, ordered) %>% as.tibble()
data_females <- cbind(data_females$CASE, f_factor, data_females$attr) %>% mutate(attr  = case_when(`data_females$attr` == 0 ~ "no attraction", `data_females$attr` > 0 ~ "some attraction"), CSBD = data_females$CSBD, PPCS_6 = data_females$PPCS_6)
data_females <- data_females %>% select(-`data_females$attr`)
data_females <- data_females %>% mutate(attr = attr %>% ordered())
colnames(data_females)[1]<-"CASE"
data_females <- data_females %>% mutate(PPCS_6 = cut_number(data_females$PPCS_6, n=2) %>% ordered(), CSBD = cut_number(data_females$CSBD, n=2) %>% ordered())
View(data_females)
desc_m <- tidySEM::descriptives(data_males %>% select(-CASE))
desc_m <- desc_m %>% select(name, type, n, missing, unique, mode, mode_value, v)
desc_f <- tidySEM::descriptives(data_males %>% select(-CASE))
desc_f <- desc_m %>% select(name, type, n, missing, unique, mode, mode_value, v)
deesc_m
desc_m
desc_f
desc_f <- tidySEM::descriptives(data_females %>% select(-CASE))
desc_f <- desc_f %>% select(name, type, n, missing, unique, mode, mode_value, v)
desc_f
lca_models_m <- mx_lca(data=data_males %>% select(-CASE), classes=1:7)
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")
lca_fit <- table_fit(lca_models_m) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, n_min, np_ratio, np_local)
lca_fit
BLRT_lca_m <- BLRT(lca_models_m, replications=1000)
knitr::opts_chunk$set(echo = TRUE)
BLRT_lca_m <- BLRT(lca_models_m, replications=100)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
BLRT_lca_m <- BLRT(lca_models_m, replications=100)
knitr::opts_chunk$set(echo = TRUE)
set.seed(42)
#Declare vector of required packages
packages <- c("tidyverse", "readr", "tidySEM")
#load function to check whether required packages are installed.
source("./functions/check_required_packages.R")
check_required_packages(packages)
#load required packages
lapply(packages, require, character.only=T)
saveRDS(lpa_model_eval, "lpa_model_eval.RDS")
saveRDS(lpa_models, "lpa_models")
saveRDS(optics_models, "optics_models.RDS")
saveRDS(full, "LPA_full_data.RDS")
rm(lpa_models)
rm(optics_models)
rm(lpa_model_eval)
rm(full)
View(desc_m)
View(lca_fit)
lr_lmr(lca_fit)
View(lca_fit)
View(lca_models_m)
lr_lmr(lca_models_m[[3]])
lca_models_m[[3]]
lca_models_m[[3]] %>% class()
?lr_lmr
lr_lmr(lca_models_m)
LR_lca_m <- lr_lmr(lca_models_m)
LR_lca_m
lca_final_model <- lca_models[[3]] #x is the class enumaration of choice
lca_final_model <- lca_models_m[[3]] #x is the class enumaration of choice
prob_table_LCA_m <- table_prob(lca_final_model)
reshape(prob_table_LCA_m, direction="wide", v.names="Probability", timevar="group", idvar = c("Variable", "Category"))
plot_prob(lca_final_model_m)
lca_final_model_m <- lca_models_m[[3]] #x is the class enumaration of choice
plot_prob(lca_final_model_m)
#Check tge
table_LCA_m <- table_results(lca_final_model_m)
table_LCA_m
#class proportions
class_prob_lca_m <- class_prob(lca_final_model_m, "sum.posterior")
class_prob_lca_m
view(lca_fit)
View(data_males)
data_males %>% select(-CASE) %>% table()
view(desc_m)
prob_table_LCA_m <- table_prob(lca_final_model_m)
reshape(prob_table_LCA_m, direction="wide", v.names="Probability", timevar="group", idvar = c("Variable", "Category")) %>% view()
scipen(999)
options(scipen=999)
reshape(prob_table_LCA_m, direction="wide", v.names="Probability", timevar="group", idvar = c("Variable", "Category")) %>% view()
plot_prob(lca_final_model_m)
lca_models_f <- mx_lca(data=data_females %>% select(-CASE), classes=1:7)
lca_fit_f <- table_fit(lca_models_f) %>% select(Name, LL, n, Parameters, BIC, Entropy, prob_min, n_min, np_ratio, np_local)
LR_lca_f <- lr_lmr(lca_models_f)
lca_fit_f
view(lca_fit_f)
#Check tge
table_LCA_f <- table_results(lca_final_model_f)
lca_final_model_f <- lca_models_f[[3]] #x is the class enumaration of choice
#Check tge
table_LCA_f <- table_results(lca_final_model_f)
#Check tge
table_LCA_f <- table_results(lca_final_model_f)
prob_table_LCA_f <- table_prob(lca_final_model_f)
reshape(prob_table_LCA_f, direction="wide", v.names="Probability", timevar="group", idvar = c("Variable", "Category")) %>% view()
plot_prob(lca_final_model_f)
#class proportions
class_prob_lca_f <- class_prob(lca_final_model_m, "sum.posterior")
class_prob_lca_f
table_LCA_f
LR_lca_f
save.image("C:/Users/gniel/OneDrive - MSB Medical School Berlin/Project special issue/LPA_analysis/.RData")

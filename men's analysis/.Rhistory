users$n_forums <- users %>% select(starts_with("forum_")) %>% rowSums()
View(users)
users %>% filter(n_forums==7) %>% pull(username)
View(users)
act_users <- users %>% filter(n_forums==7) %>% select(username, starts_with("forum_"))
View(act_users)
a_tlz %>% filter(username %in% act_users$username)
View(a_tlz)
View(b_7axxn)
View(c_pl)
View(d_giftbox)
#| label: setup
# Libraries
library(rio)
library(tidyverse)
library(flextable)
# Data
a_tlz <- import("A:/Users/a_tlz.csv")
a_tlz_posts <- import("A:/Users/a_tlz_posts.csv")
b_7axxn <- import("A:/Users/b_7axxn.csv")
b_7axxn_posts <- import("A:/Users/b_7axxn_posts.csv")
c_pl <- import("A:/Users/c_pl.csv")
c_pl_posts <- import("A:/Users/c_pl_posts.csv")
d_giftbox <- import("A:/Users/d_giftbox.csv")
d_giftbox_posts <- import("A:/Users/d_giftbox_posts.csv")
e_hvn <- import("A:/Users/e_hvn.csv")
e_hvn_posts <- import("A:/Users/e_hvn_posts.csv")
f_feetlove <- import("A:/Users/f_feetlove.csv")
f_feetlove_posts <- import("A:/Users/f_feetlove_posts.csv")
g_peer <- import("A:/Users/g_peer.csv")
g_peer_posts <- import("A:/Users/g_peer_posts.csv")
h_cp <- import("A:/Users/h_cp.csv")
h_cp_posts <- import("A:/Users/h_cp_posts.csv")
i_boyvids <- import("A:/Users/i_boyvids.csv")
i_boyvids_posts <- import("A:/Users/i_boyvids_posts.csv")
# Cleaning
a_tlz <- a_tlz %>% slice(-(1:52)) #remove 52 bots, crawlers etc.
c_pl <- c_pl %>% slice(-c(1, 3:47)) #remove 45 bots, crawlers etc.
# Cleaning
a_tlz <- a_tlz %>% slice(-(1:52)) #remove 52 bots, crawlers etc.
c_pl <- c_pl %>% slice(-c(1, 3:47)) #remove 45 bots, crawlers etc.
a_tlz_posts %>% pull(poster_id) %>% unique() %>% length()
a_tlz %>% pull(user_id)
a_tlz %>% pull(user_id) %>% length()
a_tlz %>% pull(user_id) %>% unique() %>% length()
(a_tlz %>% pull(user_id) %in% a_tlz_posts %>% pull(poster_id) %>% unique()) == TRUE %>% length()
length(a_tlz %>% pull(user_id) %in% a_tlz_posts %>% pull(poster_id) %>% unique() == TRUE)
length(a_tlz$user_id %in% unique(a_tlz_posts$poster_id) == TRUE)
length(unique(a_tlz_posts$poster_id) %in% a_tlz$user_id == TRUE)
View(b_7axxn_posts)
length(unique(b_7axxn_posts$id_member) %in% b_7axxn$id_member == TRUE)
#| label: setup
# Libraries
library(rio)
library(tidyverse)
library(flextable)
# Data
a_tlz <- import("A:/Users/a_tlz.csv")
a_tlz_posts <- import("A:/Users/a_tlz_posts.csv")
b_7axxn <- import("A:/Users/b_7axxn.csv")
b_7axxn_posts %>% filter(id_member!=0) %>% #all deleted users were assigned id = 0
pull(id_member) %>% unique() %>% length()
View(b_7axxn)
View(b_7axxn)
View(c_pl)
length(unique(c_pl_posts$poster_id) %in% c_pl$user_id == TRUE)
c_pl_posts %>% filter(poster_id!=1)%>% #all deleted users were assigned id = 1
pull(poster_id) %>% unique() %>% length()
View(d_giftbox_posts)
View(d_giftbox)
length(unique(d_giftbox_posts$uid) %in% d_giftbox$uid == TRUE)
View(e_hvn_posts)
View(a_tlz_posts)
View(a_tlz)
#| label: setup
# Libraries
library(rio)
library(tidyverse)
library(flextable)
# Data
a_tlz <- import("A:/Users/a_tlz.csv")
a_tlz_posts <- import("A:/Users/a_tlz_posts.csv")
b_7axxn <- import("A:/Users/b_7axxn.csv")
b_7axxn_posts <- import("A:/Users/b_7axxn_posts.csv")
c_pl <- import("A:/Users/c_pl.csv")
c_pl_posts <- import("A:/Users/c_pl_posts.csv")
d_giftbox <- import("A:/Users/d_giftbox.csv")
d_giftbox_posts <- import("A:/Users/d_giftbox_posts.csv")
e_hvn <- import("A:/Users/e_hvn.csv")
e_hvn_posts <- import("A:/Users/e_hvn_posts.csv")
f_feetlove <- import("A:/Users/f_feetlove.csv")
f_feetlove_posts <- import("A:/Users/f_feetlove_posts.csv")
g_peer <- import("A:/Users/g_peer.csv")
g_peer_posts <- import("A:/Users/g_peer_posts.csv")
h_cp <- import("A:/Users/h_cp.csv")
h_cp_posts <- import("A:/Users/h_cp_posts.csv")
i_boyvids <- import("A:/Users/i_boyvids.csv")
i_boyvids_posts <- import("A:/Users/i_boyvids_posts.csv")
# Cleaning
a_tlz <- a_tlz %>% slice(-(1:52)) #remove 53 bots, crawlers etc.
c_pl <- c_pl %>% slice(-c(1, 3:47)) #remove 46 bots, crawlers etc.
View(a_tlz)
View(b_7axxn)
View(c_pl)
forum_desc <- tibble(Forum = LETTERS[1:9],
`Thematic focus` = c("General", "General", "General (continuation of forum B)",
"General (pre-teen CSAM required to join)", "General", "Focus on feet",
"Producers exclusive", "General", "Boys only"),
Subforums = c(39, 5, 13, 11, 37, 4, 5, 12, 134),
`Total members` = c(nrow(a_tlz), nrow(b_7axxn), nrow(c_pl), nrow(d_giftbox), nrow(e_hvn),
nrow(f_feetlove), nrow(g_peer), nrow(h_cp), nrow(i_boyvids)),
`Active members` = c(length(unique(a_tlz_posts$poster_id) %in% a_tlz$user_id == TRUE),
length(unique(b_7axxn_posts$id_member) %in% b_7axxn$id_member == TRUE),
length(unique(c_pl_posts$poster_id) %in% c_pl$user_id == TRUE),
length(unique(d_giftbox_posts$uid) %in% d_giftbox$uid == TRUE),
length(unique(e_hvn_posts$id_member)),
length(unique(f_feetlove_posts$uid)), length(unique(g_peer_posts$uid)),
length(unique(h_cp_posts$uid)),
length(unique(i_boyvids_posts$poster_id))),
Posts = c(length(unique(a_tlz_posts$post_id)), length(unique(b_7axxn_posts$id_msg)),
length(unique(c_pl_posts$post_id)), length(unique(d_giftbox_posts$pid)),
length(unique(e_hvn_posts$id_msg)), length(unique(f_feetlove_posts$pid)),
length(unique(g_peer_posts$pid)), length(unique(h_cp_posts$pid)),
length(unique(i_boyvids_posts$post_id))),
`Months online` = c((max(a_tlz_posts$post_time)-min(a_tlz_posts$post_time))/2628000, #1 month = 2628000 seconds
(max(b_7axxn_posts$poster_time)-min(b_7axxn_posts$poster_time))/2628000,
(max(c_pl_posts$post_time)-min(c_pl_posts$post_time))/2628000,
(max(d_giftbox_posts$dateline)-min(d_giftbox_posts$dateline))/2628000,
(max(e_hvn_posts$poster_time)-min(e_hvn_posts$poster_time))/2628000,
(max(f_feetlove_posts$dateline)-min(f_feetlove_posts$dateline))/2628000,
(max(g_peer_posts$dateline)-min(g_peer_posts$dateline))/2628000,
(max(h_cp_posts$dateline)-min(h_cp_posts$dateline))/2628000,
(max(i_boyvids_posts$post_time)-min(i_boyvids_posts$post_time))/2628000)
)
length(unique(a_tlz_posts$poster_id) %in% a_tlz$user_id == TRUE)
length(unique(b_7axxn_posts$id_member) %in% b_7axxn$id_member == TRUE)
length(unique(c_pl_posts$poster_id) %in% c_pl$user_id == TRUE)
View(a_tlz)
View(a_tlz_posts)
View(b_7axxn)
View(b_7axxn_posts)
b_7axxn %>% filter(member_name=="slartibartfast")
b_7axxn %>% filter(member_name=="Cavalier")
length(unique(b_7axxn_posts$poster_name) %in% b_7axxn$member_name == TRUE)
View(a_tlz)
View(a_tlz_posts)
a_tlz %>% filter(username=="Lilly")
a_tlz %>% filter(username=="A1")
a_tlz %>% filter(username=="AlabamaBill")
a_tlz %>% filter(username=="oceans")
a_tlz %>% filter(username=="MrGrundy")
a_tlz %>% filter(username=="TORRX")
a_tlz %>% filter(username=="Darksoul")
a_tlz %>% filter(username=="ash")
a_tlz %>% filter(username=="JaneDoe")
length(unique(a_tlz_posts$post_username) %in% a_tlz$username == TRUE)
a_tlz_posts %>% filter(poster_id==226058)
View(c_pl)
View(c_pl_posts)
View(d_giftbox)
View(d_giftbox_posts)
length(unique(d_giftbox_posts$username) %in% d_giftbox$username == TRUE)
unique(d_giftbox_posts$username)
length(unique(d_giftbox_posts$username))
length(unique(d_giftbox_posts$uid))
length(unique(c_pl_posts$poster_id) %in% c_pl$user_id == TRUE)
length(unique(c_pl_posts$poster_id))
length(unique(b_7axxn_posts$poster_name) %in% b_7axxn$member_name == TRUE)
length(unique(b_7axxn_posts$poster_name))
length(unique(a_tlz_posts$poster_id) %in% a_tlz$user_id == TRUE) + #tlz shows only id for id != 1 ...
length(unique(a_tlz_posts$post_username) %in% a_tlz$username == TRUE)
length(unique(a_tlz_posts$poster_id)) + length(unique(a_tlz_posts$post_username))
View(d_giftbox_posts)
d_giftbox %>% filter(username=="testuser1")
d_giftbox %>% pull(username) %in% "testuser1"
d_giftbox %>% pull(username) %in% "testuser1" ==FALSE
length(d_giftbox %>% pull(username) %in% "testuser1" ==FALSE)
length(unique(b_7axxn_posts$poster_name) %in% b_7axxn$member_name == TRUE)
length(which(unique(b_7axxn_posts$poster_name) %in% b_7axxn$member_name))
length(which(unique(a_tlz_posts$poster_id) %in% a_tlz$user_id)) + #tlz shows only id for id != 1 ...
length(which(unique(a_tlz_posts$post_username) %in% a_tlz$username))
length(which(unique(b_7axxn_posts$poster_name) %in% b_7axxn$member_name))
View(e_hvn)
View(e_hvn_posts)
View(f_feetlove)
View(f_feetlove_posts)
View(d_giftbox_posts)
View(f_feetlove_posts)
View(g_peer)
View(g_peer_posts)
View(h_cp)
View(h_cp_posts)
View(i_boyvids)
View(i_boyvids_posts)
#| label: setup
library(tidyverse)
library(rio)
setwd("~/GitHub/LPA_analysis/men's analysis")
# Data
cv_res_males <- import("cv_results_males.csv")
View(cv_res_males)
cv_res_males$V1 <- V1+1
cv_res_males$V1 <- cv_res_males$V1+1
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line()
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`), size=2) +
geom_line()
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=5)
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=2)
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.5)
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.5) +
scale_x_continuous(breaks=c(1:7))
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.2) +
scale_x_continuous(breaks=c(1:7))
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.2) +
scale_x_continuous(breaks=c(1:7)) +
scale_y_continuous(labels=function(x) format(x, scientific=TRUE)) +
labs(x="Classes", y="LogLikelihood") +
theme_classic()
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.2) +
scale_x_continuous(breaks=c(1:7)) +
scale_y_continuous(labels=function(x) format(round(x, 2), nsmall=2, scientific=TRUE)) +
labs(x="Classes", y="LogLikelihood") +
theme_classic()
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.2) +
scale_x_continuous(breaks=c(1:7)) +
#+scale_y_continuous(labels=function(x) format(round(x, 2), nsmall=2, scientific=TRUE)) +
labs(x="Classes", y="LogLikelihood") +
theme_classic()
scale_y_continuous(labels=function(x) format(x, big.mark=",") +
theme_classic()
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
#| label: plot
ggplot(cv_res_males, aes(x=V1, y=`Val. Log Likelihood`)) +
geom_line(size=1.2) +
scale_x_continuous(breaks=c(1:7)) +
scale_y_continuous(labels=function(x) format(x, big.mark=",")) +
labs(x="Classes", y="LogLikelihood") +
theme_classic()
library(tidyverse)
library(tidySEM)
#Import the predicted class memberships csv
p_s <- read_csv("posterior_class_probs.csv")
view(p_S)
view(p_s)
p_s <- read_csv("posterior_class_probs.csv")[:,-1]
p_s <- read_csv("posterior_class_probs.csv")[,-1]
View(p_s)
?contains
p_s <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
View(p_s)
fit_measures <- read_csv("./fit_measures_males.csv")
View(fit_measures)
rm(fit_measures)
fit_measures <- read_csv("./fit_measures_males.csv")
View(fit_measures)
rm(fit_measures)
fit_measures <- read_csv("./fit_measures_males.csv")
View(fit_measures)
140/47
140/46
139/46
139/47
p_s$n_classes %>% unique()
rep_len(0, 8)
rep_len(0, 8) %>% as.list()
#Transform na into 0.
replace_0 <- rep_len(0, 8) %>% as.list()
names(replace_0)<-colnames(p_S)
names(replace_0)<-colnames(p_s)
replace_0
replace_na(p_s, replace_0)
p_s <- replace_na(p_s, replace_0)
p_s %>% filter(n_classes == 1) %>% mutate(pred_class = colnames(p_s)[apply(p_s, 1, which.max)])
apply(p_s %>% select(-n_classes), 1, which.max())
apply(p_s %>% select(-n_classes), 1, which.max)
colnames(p_s)
colnames(p_s %>% select(-n_classes))
which.max(p_s[1,] %>% as.vector())
p_s %>% select(-n_classes) %>% slice(1)
p_s %>% select(-n_classes) %>% slice(1) %>% which.max()
colnames(p_s %>% select(-n_classes))[p_s %>% select(-n_classes) %>% slice(1) %>% which.max()]
lapply(n_classes, function(x){
data <- p_s %>% filter(n_classes == .x)
})
#Get n_min
n_classes <- p_s$n_classes %>% unique()
lapply(n_classes, function(x){
data <- p_s %>% filter(n_classes == .x)
})
map_dbl(~p_s %>% select(-n_classes) %>% slice(.x) %>% which.max())
map_dbl(1:nrow(p_s),~p_s %>% select(-n_classes) %>% slice(.x) %>% which.max())
#Get get the predicted class-membership
p_s <- p_s %>% mutate(pred_class = map_dbl(1:nrow(p_s),~p_s %>% select(-n_classes) %>% slice(.x) %>% which.max()))
View(p_s)
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n())
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263)
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263) %>% ungroup()
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% summarise(n_min = slice_min(n))
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% summarise(n_min = slice_min(n))
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% slice_min(n))
p_s %>% group_by(n_classes, pred_class) %>% summarise(n = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% slice_min(n)
p_s %>% group_by(n_classes, pred_class) %>% summarise(n_min = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% slice_min(n_min)
p_s %>% group_by(n_classes, pred_class) %>% summarise(n_min = n()/1263) %>% ungroup() %>% group_by(n_classes) %>% slice_min(n_min) %>% pull(n_min)
#Get n_min and insert it o the fit_measures data_frame
fit_measures <- fit_measures %>% mutate(n_min = p_s %>% #take the probabilities frame
group_by(n_classes, pred_class) %>%
summarise(n_min = n()/1263) %>% #see how big relative to n each class in each model is
ungroup() %>%
group_by(n_classes) %>%
slice_min(n_min) %>% #return the size value of the smallest class in each model
pull(n_min))
View(fit_measures)
fit_measures <- fit_measures %>% mutate(np_ratio = 1263/n_parameters)
View(fit_measures)
library(tidyverse)
library(tidyverse)
library(tidySEM)
p_s <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
p_s <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
fit_measures <- read_csv("./fit_measures_males.csv")
#| label: bootstrapped_data
#read in the data
bootstrapped_params <- read_csv("bootstrapped_samples_k3.csv") %>% select(-rep)
sm_params <- read_csv("parameters_males_k3.csv") %>%
filter(model == "structural") %>%
select(variable, value, class_no) %>%
pivot_wider(values_from = value,
names_from = class_no,
names_glue = "class{class_no}_parameter")
#select the measurement parameters
sm_boot_params <- bootstrapped_params %>%
filter(model == "structural") %>%
select(class_no, variable, value)
#summarise CIs
sm_CIs <- sm_boot_params %>%
select(class_no, variable, value) %>%
group_by(class_no, variable)  %>%
summarise(LB_0.025 = quantile(value, probs = c(0.025, 0.975))[1],
UB_0.975 = quantile(value, probs = c(0.025, 0.975))[2]) %>%
ungroup()
sm_CIs <- sm_CIs %>%
pivot_wider(values_from = c(LB_0.025, UB_0.975), #pivot dataframe
names_from = class_no,
names_glue = "class{class_no}_{.value}") %>%
full_join(sm_params, by= "variable") %>% #join with the actual estimated parameter values
mutate(class0_sig = case_when((class0_LB_0.025 > 0.5) |
(0.5 > class0_UB_0.975) ~ "significant",
.default = "not_significant" ), #significance class 0
class1_sig = case_when((class1_LB_0.025 > 0.5) |
(0.5 > class1_UB_0.975) ~ "significant",
.default = "not_significant"), #significance class 1
class2_sig = case_when((class2_LB_0.025 > 0.5) |
(0.5 > class2_UB_0.975) ~ "significant",
.default = "not_significant" )) %>% #significance class 2
relocate(variable, contains("class0"), contains("class1"), contains("class2")) #nicely order the dataframe
View(bootstrapped_params)
bootstrapped_params %>% filter(model_name == "class_weight")
bootstrapped_params %>% filter(model_name == "class_weights")
bootstrapped_params %>% filter(model_name == "class_weights") %>% select(class_no, value) %>% group_by(class_no) %>% summarise(LB = quantile(value, probs=c(0.025, 0.975))[1], UB = quantile(value, probs=c(0.025, 0.975))[2])
#Import the predicted class memberships csv
p_m <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
fit_measures_m <- read_csv("./fit_measures_m_males.csv")
#Import the predicted class memberships csv
p_m <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
fit_measures_m <- read_csv("./fit_measures_males.csv")
#Transform na into 0.
replace_0 <- rep_len(0, 8) %>% as.list()
names(replace_0)<-colnames(p_m)
#Replace NA with 0 in the whole dataframe
p_m <- replace_na(p_m, replace_0)
#Get get the predicted class-membership
p_m <- p_m %>% mutate(pred_class = map_dbl(1:nrow(p_m),~p_m %>% select(-n_classes) %>% slice(.x) %>% which.max()))
#Get n_min and insert it o the fit_measures_m data_frame
fit_measures_m <- fit_measures_m %>% mutate(n_min = p_m %>% #take the probabilities frame
group_by(n_classes, pred_class) %>%
summarise(n_min = n()/1263) %>% #see how big relative to n each class in each model is
ungroup() %>%
group_by(n_classes) %>%
slice_min(n_min) %>% #return the size value of the smallest class in each model
pull(n_min))
fit_measures_m <- fit_measures_m %>% mutate(np_ratio = 1263/n_parameters)
#| label: bootstrapped_data
#read in the data
bootstrapped_params_m <- read_csv("bootstrapped_samples_k3.csv") %>% select(-rep)
sm_params_m <- read_csv("parameters_males_k3.csv") %>%
filter(model == "structural") %>%
select(variable, value, class_no) %>%
pivot_wider(values_from = value,
names_from = class_no,
names_glue = "class{class_no}_parameter")
#select the measurement parameters
sm_boot_params_m <- bootstrapped_params_m %>%
filter(model == "structural") %>%
select(class_no, variable, value)
#summarise CIs
sm_CIs_m <- sm_boot_params_m %>%
select(class_no, variable, value) %>%
group_by(class_no, variable)  %>%
summarise(LB_0.025 = quantile(value, probs = c(0.025, 0.975))[1],
UB_0.975 = quantile(value, probs = c(0.025, 0.975))[2]) %>%
ungroup()
#Pivot dataframe for convenience reading, join with the sm_params_m tibble & compute significance decisions. Significance decisions are based on the dichotomous nature of the outcomes. If the 95 % CI of the parameters encloses 0.5, than the membership of that class tells us nothing about the propensity of a person to give a propensity other than zero.
sm_CIs_m <- sm_CIs_m %>%
pivot_wider(values_from = c(LB_0.025, UB_0.975), #pivot dataframe
names_from = class_no,
names_glue = "class{class_no}_{.value}") %>%
full_join(sm_params_m, by= "variable") %>% #join with the actual estimated parameter values
mutate(class0_sig = case_when((class0_LB_0.025 > 0.5) |
(0.5 > class0_UB_0.975) ~ "significant",
.default = "not_significant" ), #significance class 0
class1_sig = case_when((class1_LB_0.025 > 0.5) |
(0.5 > class1_UB_0.975) ~ "significant",
.default = "not_significant"), #significance class 1
class2_sig = case_when((class2_LB_0.025 > 0.5) |
(0.5 > class2_UB_0.975) ~ "significant",
.default = "not_significant" )) %>% #significance class 2
relocate(variable, contains("class0"), contains("class1"), contains("class2")) #nicely order the dataframe
#| label: CI_mixture_m
#compute 95% CI for mixture parameters
CI_mixture_m <- bootstrapped_params_m %>%
filter(model_name == "class_weights") %>% #filter mixture parameters
select(class_no, value) %>% #select necessary variables
group_by(class_no) %>% #group_by classes
summarise(LB = quantile(value, probs=c(0.025, 0.975))[1], #get bounds of CIs
UB = quantile(value, probs=c(0.025, 0.975))[2])
View(CI_mixture_m)
library(tidyverse)
library(tidySEM)
#Import the predicted class memberships csv
p_m <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))
fit_measures_m <- read_csv("./fit_measures_males.csv")
#Transform na into 0.
replace_0 <- rep_len(0, 8) %>% as.list()
names(replace_0)<-colnames(p_m)
#Replace NA with 0 in the whole dataframe
p_m <- replace_na(p_m, replace_0)
#Get get the predicted class-membership
p_m <- p_m %>% mutate(pred_class = map_dbl(1:nrow(p_m),~p_m %>% select(-n_classes) %>% slice(.x) %>% which.max()))
#Get n_min and insert it o the fit_measures_m data_frame
fit_measures_m <- fit_measures_m %>% mutate(n_min = p_m %>% #take the probabilities frame
group_by(n_classes, pred_class) %>%
summarise(n_min = n()/1263) %>% #see how big relative to n each class in each model is
ungroup() %>%
group_by(n_classes) %>%
slice_min(n_min) %>% #return the size value of the smallest class in each model
pull(n_min))
fit_measures_m <- fit_measures_m %>% mutate(np_ratio = 1263/n_parameters)
#| label: bootstrapped_data
#read in the data
bootstrapped_params_m <- read_csv("bootstrapped_samples_k3.csv") %>% select(-rep)
sm_params_m <- read_csv("parameters_males_k3.csv") %>%
filter(model == "structural") %>%
select(variable, value, class_no) %>%
pivot_wider(values_from = value,
names_from = class_no,
names_glue = "class{class_no}_parameter")
#select the measurement parameters
sm_boot_params_m <- bootstrapped_params_m %>%
filter(model == "structural") %>%
select(class_no, variable, value)
#summarise CIs
sm_CIs_m <- sm_boot_params_m %>%
select(class_no, variable, value) %>%
group_by(class_no, variable)  %>%
summarise(LB_0.025 = quantile(value, probs = c(0.025, 0.975))[1],
UB_0.975 = quantile(value, probs = c(0.025, 0.975))[2]) %>%
ungroup()
#Pivot dataframe for convenience reading, join with the sm_params_m tibble & compute significance decisions. Significance decisions are based on the dichotomous nature of the outcomes. If the 95 % CI of the parameters encloses 0.5, than the membership of that class tells us nothing about the propensity of a person to give a propensity other than zero.
sm_CIs_m <- sm_CIs_m %>%
pivot_wider(values_from = c(LB_0.025, UB_0.975), #pivot dataframe
names_from = class_no,
names_glue = "class{class_no}_{.value}") %>%
full_join(sm_params_m, by= "variable") %>% #join with the actual estimated parameter values
mutate(class0_sig = case_when((class0_LB_0.025 > 0.5) |
(0.5 > class0_UB_0.975) ~ "significant",
.default = "not_significant" ), #significance class 0
class1_sig = case_when((class1_LB_0.025 > 0.5) |
(0.5 > class1_UB_0.975) ~ "significant",
.default = "not_significant"), #significance class 1
class2_sig = case_when((class2_LB_0.025 > 0.5) |
(0.5 > class2_UB_0.975) ~ "significant",
.default = "not_significant" )) %>% #significance class 2
relocate(variable, contains("class0"), contains("class1"), contains("class2")) #nicely order the dataframe
#| label: CI_mixture_m
#compute 95% CI for mixture parameters
CI_mixture_m <- bootstrapped_params_m %>%
filter(model_name == "class_weights") %>% #filter mixture parameters
select(class_no, value) %>% #select necessary variables
group_by(class_no) %>% #group_by classes
summarise(LB = quantile(value, probs=c(0.025, 0.975))[1], #get bounds of CIs
UB = quantile(value, probs=c(0.025, 0.975))[2])
View(fit_measures_m)

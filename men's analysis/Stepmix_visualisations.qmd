---

---
title: "Stepmix_visualisation_males"
format: html
editor: visual
---

### Library & loading data

We need to load our standard packages plus the package tidysem.

```{r}
library(tidyverse)
library(tidySEM)
```

We load in the exported results from stepmix in python.

```{r}
#Import the predicted class memberships csv

p_s <- read_csv("posterior_class_probs.csv")[,-1] %>% select(n_classes, matches("[[:digit:]]"))

fit_measures <- read_csv("./fit_measures_males.csv")


```

Now we want to derive a few measures for the models that are derived from van Lissa et al. (2023): n_min and min_prob.

n_min describes the number of cases that would have been categorised in the smallest class of the model. The logic behind that being that if the smallest class is too small there are also too few cases to learn the parameters that distinguish that class.

prob_min is a little more complex and I still need to understand it correctly from the Van Lissa text.

```{r}
#Transform na into 0.
replace_0 <- rep_len(0, 8) %>% as.list()
names(replace_0)<-colnames(p_s)

#Replace NA with 0 in the whole dataframe
p_s <- replace_na(p_s, replace_0)

#Get get the predicted class-membership
p_s <- p_s %>% mutate(pred_class = map_dbl(1:nrow(p_s),~p_s %>% select(-n_classes) %>% slice(.x) %>% which.max()))

#Get n_min and insert it o the fit_measures data_frame
fit_measures <- fit_measures %>% mutate(n_min = p_s %>% #take the probabilities frame
                                          group_by(n_classes, pred_class) %>% 
                                          summarise(n_min = n()/1263) %>% #see how big relative to n each class in each model is
                                          ungroup() %>% 
                                          group_by(n_classes) %>% 
                                          slice_min(n_min) %>% #return the size value of the smallest class in each model
                                          pull(n_min))

```

Now we add the np-ratio value to the fitmeasures table. It is n/number of parameters. Recognize

```{r}
fit_measures <- fit_measures %>% mutate(np_ratio = 1263/n_parameters)
```

Next we need to evaluate prob_min and prob_max. They are computed by
